<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name=""
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">
   <description></description>
   <rule message="내용이 없는 Catch Block이 존재" ref="rulesets/java/basic.xml/EmptyCatchBlock">
      <priority>1</priority>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 if 구문의 사용을 피하도록 함"
         name="EmptyIfStmt"
         typeResolution="false">
      <description>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//IfStatement/Statement
 [EmptyStatement or Block[count(*) = 0]]
 
              </value>
         </property>
      </properties>
      <example>
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 While 구문이 사용되었음. "
         name="EmptyWhileStmt"
         typeResolution="false">
      <description>
Empty While Statement finds all instances where a while statement
does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if
it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]

              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 void bar(int a, int b) {
  while (a == b) {
   // empty!
  }
 }
}
 
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="내용이 없는   try 블록이 존재함"
         name="EmptyTryBlock"
         typeResolution="false">
      <description>
Avoid empty try blocks - what's the point?
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//TryStatement/Block[1][count(*) = 0]

              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  try {
  } catch (Exception e) {
    e.printStackTrace();
  }
 }
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="finally block이 비어있음"
         name="EmptyFinallyBlock"
         typeResolution="false">
      <description>
Avoid empty finally blocks - these can be deleted.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//FinallyStatement[count(Block/BlockStatement) = 0]
 
              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  try {
    int x=2;
   } finally {
    // empty!
   }
 }
}
 
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="필요없는 문장 (;)이 있음"
         name="EmptyStatementNotInLoop"
         typeResolution="false">
      <description>
An empty statement (aka a semicolon by itself) that is not used
as the sole body of a for loop or while loop is probably a bug.  It
could also be a double semicolon, which is useless and should be
removed.
       </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//Statement/EmptyStatement
 [not(
       ../../../ForStatement
       or ../../../WhileStatement
       or ../../../BlockStatement/ClassOrInterfaceDeclaration
       or ../../../../../../ForStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement
       or ../../../../../../WhileStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement)
 ]

                </value>
         </property>
      </properties>
      <example>

public class MyClass {
   public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println("look at the extra semicolon");;
   }
}

       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryConversionTemporaryRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="기본 데이터(primitive type)를 String으로 변환할 때 불필요한 임시 변환 작업을 피하도록 함"
         name="UnnecessaryConversionTemporary"
         typeResolution="true">
      <description>
Avoid unnecessary temporaries when converting primitives to Strings
      </description>
      <priority>1</priority>
      <example>
  
public String convert(int x) {
  // this wastes an object
  String foo = new Integer(x).toString();
  // this is better
  return Integer.toString(x);
}
 
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryConversionTemporaryRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="기본 데이터(primitive type)를 String으로 변환할 때 불필요한 임시 변환 작업을 피하도록 함"
         name="UnnecessaryConversionTemporary"
         typeResolution="true">
      <description>
Avoid unnecessary temporaries when converting primitives to Strings
      </description>
      <priority>1</priority>
      <example>
  
public String convert(int x) {
  // this wastes an object
  String foo = new Integer(x).toString();
  // this is better
  return Integer.toString(x);
}
 
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="boolean 사용 시 불필요한 비교 연산을 피하도록 함"
         name="SimplifyBooleanExpressions"
         typeResolution="false">
      <description>
Avoid unnecessary comparisons in boolean expressions - this makes simple code seem complicated.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>

//EqualityExpression/PrimaryExpression
 /PrimaryPrefix/Literal/BooleanLiteral

              </value>
         </property>
      </properties>
      <example>
  
public class Bar {
 // can be simplified to
 // bar = isFoo();
 private boolean bar = (isFoo() == true);

 public isFoo() { return false;}
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="Switch구문에는 반드시 default label이 있어야 함"
         name="SwitchStmtsShouldHaveDefault"
         typeResolution="false">
      <description>
Switch statements should have a default label.
    </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                  
//SwitchStatement[not(SwitchLabel[@Default='true'])]
                  
              </value>
         </property>
      </properties>
      <example>

public class Foo {
 public void bar() {
  int x = 2;
  switch (x) {
   case 2: int j = 8;
  }
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AvoidReassigningParametersRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{0}'' 처럼 파라미터 값을 직접 변경하지 말것"
         name="AvoidReassigningParameters"
         typeResolution="true">
      <description>
Reassigning values to parameters is a questionable practice.  Use a temporary local variable instead.
    </description>
      <priority>2</priority>
      <example>

public class Foo {
 private void foo(String bar) {
  bar = "something else";
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="final field를 Static 으로 변경하면 overhead 를 줄일 수 있음."
         name="FinalFieldCouldBeStatic"
         typeResolution="false">
      <description>
If a final field is assigned to a compile-time constant, it could be
made static, thus saving overhead in each object
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                    
//FieldDeclaration
 [@Final='true' and @Static='false']
 [not (../../../../ClassOrInterfaceDeclaration[@Interface='true'])]
   /VariableDeclarator/VariableInitializer/Expression
    /PrimaryExpression/PrimaryPrefix/Literal
                    
                </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public final int BAR = 42; // this could be static and save some space
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="null 값과 비교하기 위해 equals 함수를 사용하였음."
         name="EqualsNull"
         typeResolution="false">
      <description>
Newbie programmers sometimes get the comparison concepts confused
and use equals() to compare to null.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
    
//PrimaryExpression
 [
PrimaryPrefix/Name[ends-with(@Image, 'equals')]
or
PrimarySuffix[ends-with(@Image, 'equals')]
]
[PrimarySuffix/Arguments/ArgumentList[count(Expression)=1]
  /Expression/PrimaryExpression/PrimaryPrefix
   /Literal/NullLiteral]
    
                </value>
         </property>
      </properties>
      <example>
       
class Bar {
   void foo() {
       String x = "foo";
       if (x.equals(null)) { // bad!
        doSomething();
       }
   }
}
    
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="SimpleDateFormat 인스턴스를 생성할때 Locale 을 지정하는 것이 바람직함"
         name="SimpleDateFormatNeedsLocale"
         typeResolution="false">
      <description>
Be sure to specify a Locale when creating a new instance of SimpleDateFormat.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//AllocationExpression
 [ClassOrInterfaceType[@Image='SimpleDateFormat']]
 [Arguments[@ArgumentCount=1]]

                    </value>
         </property>
      </properties>
      <example>
        
public class Foo {
 // Should specify Locale.US (or whatever)
 private SimpleDateFormat sdf = new SimpleDateFormat("pattern");
}
        
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="생성자에서 Assign된 변수 ''{0}'' 를 Final로 선언하지 않았음"
         name="ImmutableField"
         typeResolution="true">
      <description>
Identifies private fields whose values never change once they are initialized either in the declaration of the field or by
a constructor.  This aids in converting existing classes to immutable classes.
      </description>
      <priority>1</priority>
      <example>
  
public class Foo {
  private int x; // could be final
  public Foo() {
      x = 7;
  }
  public void foo() {
     int a = x + 2;
  }
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AssignmentToNonFinalStaticRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="static 필드의 안전하지않은 사용 가능성"
         name="AssignmentToNonFinalStatic"
         typeResolution="true">
      <description>
Identifies a possible unsafe usage of a static field.
       </description>
      <priority>1</priority>
      <example>
   
public class StaticField {
   static int x;
   public FinalFields(int y) {
    x = y; // unsafe
   }
}
   
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="mothod 레벨의 synchronization 보다 block 레벨 synchronization 을 사용하는 것이 바람직함"
         name="AvoidSynchronizedAtMethodLevel"
         typeResolution="false">
      <description>
  Method level synchronization can backfire when new code is added to the method.  Block-level
  synchronization helps to ensure that only the code that needs synchronization gets it.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
    
//MethodDeclaration[@Synchronized='true']
    
              </value>
         </property>
      </properties>
      <example>

public class Foo {
 // Try to avoid this
 synchronized void foo() {
 }
 // Prefer this:
 void bar() {
  synchronized(this) {
  }
 }
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="Abstract Class내에  Abstract Method가 존재하지 않음"
         name="AbstractClassWithoutAbstractMethod"
         typeResolution="false">
      <description>
The abstract class does not contain any abstract methods. An abstract class suggests
an incomplete implementation, which is to be completed by subclasses implementing the
abstract methods. If the class is intended to be used as a base class only (not to be instantiated
direcly) a protected constructor can be provided prevent direct instantiation.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
//ClassOrInterfaceDeclaration
 [@Abstract='true'
  and count( .//MethodDeclaration[@Abstract='true'] )=0 ]
  [count(ImplementsList)=0]
              
              </value>
         </property>
      </properties>
      <example>

public abstract class Foo {
 void int method1() { ... }
 void int method2() { ... }
 // consider using abstract methods or removing
 // the abstract modifier and adding protected constructors
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="Interface는 클래스의 behavior 을 구현하는 데에만 사용해야 함. "
         name="AvoidConstantsInterface"
         typeResolution="false">
      <description>
     An interface should be used only to model a behaviour of a
    class: using an interface as a container of constants is a poor usage pattern.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
    
    //ClassOrInterfaceDeclaration[@Interface="true"]
    [
     count(//MethodDeclaration)=0
     and
     count(//FieldDeclaration)&gt;0
    ]
    
        </value>
         </property>
      </properties>
      <example>
    
    public interface ConstantsInterface {
     public static final int CONSTANT1=0;
     public static final String CONSTANT2="1";
    }
    
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="피연산자내에 할당문이 사용됨.Code 를 복잡하고 가독성이 떨어지게 만듬"
         name="AssignmentInOperand"
         typeResolution="false">
      <description>
Avoid assignments in operands; this can make code more complicated and harder to read.
  </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
                    
//*[name()='WhileStatement' or name()='IfStatement']
 [Expression//AssignmentOperator]
                    
                </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  int x = 2;
  if ((x = getX()) == 3) {
   System.out.println("3!");
  }
 }
 private int getX() {
  return 3;
 }
}
  
  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="괄호가 없어도 되는 상황에서 불필요한 괄호를 사용할 경우 마치 메소드 호출처럼 보여서 소스 코드의 가독성을 떨어뜨릴 수 있음."
         name="UnnecessaryParentheses"
         typeResolution="false">
      <description>
Sometimes expressions are wrapped in unnecessary parentheses,
making them look like a function call.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                
//ReturnStatement
          /Expression
           /PrimaryExpression
            /PrimaryPrefix
             /Expression[count(*)=1]
              /PrimaryExpression
              /PrimaryPrefix
            </value>
         </property>
      </properties>
      <example>
  public class Foo {
      boolean bar() {
          return (true);
      }
  }
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="중괄호없이 사용된 while문의 사용은 피하라"
         name="WhileLoopsMustUseBraces"
         typeResolution="false">
      <description>
Avoid using 'while' statements without using curly braces
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//WhileStatement[not(Statement/Block)]

                </value>
         </property>
      </properties>
      <example>

public void doSomething() {
  while (true)
      x++;
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/rules/logging-java.html#SystemPrintln"
         language="java"
         message="System.out.print 가 사용됨."
         name="SystemPrintln"
         since="2.1"
         typeResolution="false">
      <description>
System.(out|err).print is used, consider using a logger.
     </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                 
//Name[
    starts-with(@Image, 'System.out.print')
    or
    starts-with(@Image, 'System.err.print')
    ]
                
             </value>
         </property>
      </properties>
      <example>
 
class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());
    public void testA () {
        System.out.println("Entering test");
        // Better use this
        log.fine("Entering test");
    }
}

     </example>
   </rule>
   <rule message="내용이 없는 Catch Block이 존재" ref="rulesets/java/basic.xml/EmptyCatchBlock">
      <priority>1</priority>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 if 구문의 사용을 피하도록 함"
         name="EmptyIfStmt"
         typeResolution="false">
      <description>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//IfStatement/Statement
 [EmptyStatement or Block[count(*) = 0]]
 
              </value>
         </property>
      </properties>
      <example>
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 While 구문이 사용되었음. "
         name="EmptyWhileStmt"
         typeResolution="false">
      <description>
Empty While Statement finds all instances where a while statement
does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if
it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]

              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 void bar(int a, int b) {
  while (a == b) {
   // empty!
  }
 }
}
 
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="내용이 없는   try 블록이 존재함"
         name="EmptyTryBlock"
         typeResolution="false">
      <description>
Avoid empty try blocks - what's the point?
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//TryStatement/Block[1][count(*) = 0]

              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  try {
  } catch (Exception e) {
    e.printStackTrace();
  }
 }
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="finally block이 비어있음"
         name="EmptyFinallyBlock"
         typeResolution="false">
      <description>
Avoid empty finally blocks - these can be deleted.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//FinallyStatement[count(Block/BlockStatement) = 0]
 
              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  try {
    int x=2;
   } finally {
    // empty!
   }
 }
}
 
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="필요없는 문장 (;)이 있음"
         name="EmptyStatementNotInLoop"
         typeResolution="false">
      <description>
An empty statement (aka a semicolon by itself) that is not used
as the sole body of a for loop or while loop is probably a bug.  It
could also be a double semicolon, which is useless and should be
removed.
       </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//Statement/EmptyStatement
 [not(
       ../../../ForStatement
       or ../../../WhileStatement
       or ../../../BlockStatement/ClassOrInterfaceDeclaration
       or ../../../../../../ForStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement
       or ../../../../../../WhileStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement)
 ]

                </value>
         </property>
      </properties>
      <example>

public class MyClass {
   public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println("look at the extra semicolon");;
   }
}

       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.VariableNamingConventionsRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{0}'' 의 변수 ''{1}'' 이  ''{2}''  로 시작함"
         name="VariableNamingConventions"
         typeResolution="true">
      <description>
A variable naming conventions rule - customize this to your liking.  Currently, it
 checks that final variables should be all caps and non-final variables
 should not include underscores.
        </description>
      <priority>1</priority>
      <properties>
         <property name="memberSuffix" value=""/>
         <property name="memberPrefix" value=""/>
         <property name="staticSuffix" value=""/>
         <property name="staticPrefix" value=""/>
      </properties>
      <example>

public class Foo {
 public static final int MY_NUM = 0;
 public String myTest = "";
 DataModule dmTest = new DataModule();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="non-field 이름이 m_ 으로 시작함."
         name="MisleadingVariableName"
         typeResolution="false">
      <description>
Detects when a non-field has a name starting with 'm_'.  This usually
indicates a field and thus is confusing.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                    
//VariableDeclaratorId
[starts-with(@Image, 'm_')]
[not (../../../FieldDeclaration)]
                    
                </value>
         </property>
      </properties>
      <example>
  
  public class Foo {
    private int m_foo; // OK
    public void bar(String m_baz) {  // Bad
      int m_boz = 42; // Bad
    }
  }
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="중괄호없이 사용된 while문의 사용은 피하라"
         name="WhileLoopsMustUseBraces"
         typeResolution="false">
      <description>
Avoid using 'while' statements without using curly braces
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//WhileStatement[not(Statement/Block)]

                </value>
         </property>
      </properties>
      <example>

public void doSomething() {
  while (true)
      x++;
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.StringInstantiationRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="필요없는 Instance가 생성되어 있음"
         name="StringInstantiation"
         typeResolution="true">
      <description>
Avoid instantiating String objects; this is usually unnecessary.
    </description>
      <priority>1</priority>
      <example>

public class Foo {
 private String bar = new String("bar"); // just do a String bar = "bar";
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.StringToStringRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="String 객체에서 toString()함수를 사용하는 것은 불필요함"
         name="StringToString"
         typeResolution="true">
      <description>
    Avoid calling toString() on String objects; this is unnecessary
    </description>
      <priority>1</priority>
      <example>

public class Foo {
 private String baz() {
  String bar = "howdy";
  return bar.toString();
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.InefficientStringBufferingRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="StringBuffer 함수에서 nonliteral 을 직접 concatenate 하지 말 것"
         name="InefficientStringBuffering"
         typeResolution="true">
      <description>
Avoid concatenating non literals in a StringBuffer constructor or append().
    </description>
      <priority>2</priority>
      <example>

public class Foo {
 void bar() {
  // Avoid this
  StringBuffer sb=new StringBuffer("tmp = "+System.getProperty("java.io.tmpdir"));
  // use instead something like this
  StringBuffer sb = new StringBuffer("tmp = ");
  sb.append(System.getProperty("java.io.tmpdir"));
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.InefficientEmptyStringCheckRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="Empty String 을 체크하기 위해 String.trim().length() 을 사용하는 것은 피하도록 함"
         name="InefficientEmptyStringCheck"
         typeResolution="true">
      <description>
	   String.trim().length() is an inefficient way to check if a String is really empty, as it 
	   creates a new String object just to check its size. Looping through a string, checking Character.isWhitespace()
	   on each character and returning false if a non-whitespace character is found is preferable
    </description>
      <priority>1</priority>
      <example>

public class Foo {
    void bar(String string) {
        if (string != null &amp;&amp; string.trim().size() &gt; 0) { 
		    doSomething();
        } 
    }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="String 을 append 할 경우, String.valueOf 함수를 사용할 필요 없음."
         name="UselessStringValueOf"
         typeResolution="false">
      <description>
Use valueOf() argument directly.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//AdditiveExpression[@Image='+']
[PrimaryExpression/PrimaryPrefix/Name[@Image='String.valueOf']]

              </value>
         </property>
      </properties>
      <example>

public String convert(int i) {
  String s;
  s = "a" + String.valueOf(i); // Bad
  s = "a" + i; // Better
  return s;
}

          </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="괄호가 없어도 되는 상황에서 불필요한 괄호를 사용할 경우 마치 메소드 호출처럼 보여서 소스 코드의 가독성을 떨어뜨릴 수 있음."
         name="UnnecessaryParentheses"
         typeResolution="false">
      <description>
Sometimes expressions are wrapped in unnecessary parentheses,
making them look like a function call.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                
//ReturnStatement
          /Expression
           /PrimaryExpression
            /PrimaryPrefix
             /Expression[count(*)=1]
              /PrimaryExpression
              /PrimaryPrefix
            </value>
         </property>
      </properties>
      <example>
  public class Foo {
      boolean bar() {
          return (true);
      }
  }
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="가공되지 않은 Exception을 throw하는 것은 비추천"
         name="AvoidThrowingRawExceptionTypes"
         typeResolution="false">
      <description>
Avoid throwing certain exception types.  Rather than throw a raw RuntimeException, Throwable,
 Exception, or Error, use a subclassed exception or error instead.
    </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
            
//AllocationExpression
 /ClassOrInterfaceType[
 @Image='Throwable' or
 @Image='Exception' or
 @Image='Error' or
 @Image='RuntimeException']
 
        </value>
         </property>
      </properties>
      <example>
      
public class Foo {
public void bar() throws Exception {
  throw new Exception();
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="NullPointerException을 throw하는 것은 비추천"
         name="AvoidThrowingNullPointerException"
         typeResolution="false">
      <description>
Avoid throwing a NullPointerException - it's confusing because most people will assume that the
 virtual machine threw it.  Consider using an IllegalArgumentException instead; this will be
 clearly seen as a programmer initiated exception.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
              
//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']
   
          </value>
         </property>
      </properties>
      <example>
        
public class Foo {
 void bar() {
  throw new NullPointerException();
 }
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="피연산자내에 할당문이 사용됨.Code 를 복잡하고 가독성이 떨어지게 만듬"
         name="AssignmentInOperand"
         typeResolution="false">
      <description>
Avoid assignments in operands; this can make code more complicated and harder to read.
  </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
                    
//*[name()='WhileStatement' or name()='IfStatement']
 [Expression//AssignmentOperator]
                    
                </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  int x = 2;
  if ((x = getX()) == 3) {
   System.out.println("3!");
  }
 }
 private int getX() {
  return 3;
 }
}
  
  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateFieldRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="사용되지 않는 Private field ''{0}'' 가 선언되었음"
         name="UnusedPrivateField"
         typeResolution="true">
      <description>
Detects when a private field is declared and/or assigned a value, but not used.
    </description>
      <priority>2</priority>
      <example>

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateMethodRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="사용되지 않는 Private Method ''{0}'' 가 선언되었음"
         name="UnusedPrivateMethod"
         typeResolution="true">
      <description>
Unused Private Method detects when a private method is declared but is unused.
    </description>
      <priority>2</priority>
      <example>

public class Something {
 private void foo() {} // unused
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedFormalParameterRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{1}'' 처럼  사용되지 않는  ''{0}'' 파라미터가 있음"
         name="UnusedFormalParameter"
         typeResolution="true">
      <description>
Avoid passing parameters to methods or constructors and then not using those parameters.
    </description>
      <priority>2</priority>
      <example>

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="배열의 값을 루프문을 이용하여 복사하는 것 보다 System.arraycopy() 메소드를 이용하여 복사하는 것이 효율적이며 수행 속도가 빠름"
         name="AvoidArrayLoops"
         typeResolution="false">
      <description>
    Instead of copying data between two arrays, use
    System.arrayCopy method
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
    
//Statement[(ForStatement or WhileStatement) and
count(*//AssignmentOperator[@Image = '='])=1
and
*/Statement
[
./Block/BlockStatement/Statement/StatementExpression/PrimaryExpression
/PrimaryPrefix/Name/../../PrimarySuffix/Expression
[(PrimaryExpression or AdditiveExpression) and count
(.//PrimaryPrefix/Name)=1]//PrimaryPrefix/Name/@Image
and
./Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression
/PrimaryPrefix/Name/../../PrimarySuffix[count
(..//PrimarySuffix)=1]/Expression[(PrimaryExpression
or AdditiveExpression) and count(.//PrimaryPrefix/Name)=1]
//PrimaryPrefix/Name/@Image
]]
    
        </value>
         </property>
      </properties>
      <example>
    
public class Test {
 public void bar() {
  int[] a = new int[10];
  int[] b = new int[10];
  for (int i=0;i&lt;10;i++) {
   b[i]=a[i];
  }
 }
}
            // this will trigger the rule
            for (int i=0;i&lt;10;i++) {
             b[i]=a[c[i]];
            }

        }
    }
    
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="불필요한 Wrapper Object가 생성되었음."
         name="UnnecessaryWrapperObjectCreation"
         typeResolution="false">
      <description>
Parsing method should be called directy instead.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>

//PrimaryExpression[
PrimaryPrefix/Name[
@Image='Byte.valueOf' or
@Image='Short.valueOf' or
@Image='Integer.valueOf' or
@Image='Long.valueOf' or
@Image='Float.valueOf' or
@Image='Double.valueOf' or
@Image='Boolean.valueOf' or
@Image='Character.valueOf'
]
and
PrimarySuffix[
@Image='byteValue' or
@Image='shortValue' or
@Image='intValue' or
@Image='longValue' or
@Image='floatValue' or
@Image='doubleValue' or
@Image='booleanValue' or
@Image='charValue'
]]

              </value>
         </property>
      </properties>
      <example>

public int convert(String s) {
  int i, i2;

  i = Integer.valueOf(s).intValue(); // this wastes an object
  i = Integer.parseInt(s); // this is better

  i2 = Integer.valueOf(i).intValue(); // this wastes an object
  i2 = i; // this is better

  return i2;
}

          </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.DuplicateImportsRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{0}'' import문이 중복 선언 되었음"
         name="DuplicateImports"
         typeResolution="true">
      <description>
    Avoid duplicate import statements.
    </description>
      <priority>1</priority>
      <example>

import java.lang.String;
import java.lang.*;
public class Foo {}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.ImportFromSamePackageRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="동일 패키지에 있을 때는 import문을 사용할 필요가 없음"
         name="ImportFromSamePackage"
         typeResolution="true">
      <description>
 No need to import a type that's in the same package.
     </description>
      <priority>1</priority>
      <example>
 
 package foo;
 import foo.Buz; // no need for this
 import foo.*; // or this
 public class Bar{}
 
     </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AvoidReassigningParametersRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{0}'' 처럼 파라미터 값을 직접 변경하지 말것"
         name="AvoidReassigningParameters"
         typeResolution="true">
      <description>
Reassigning values to parameters is a questionable practice.  Use a temporary local variable instead.
    </description>
      <priority>2</priority>
      <example>

public class Foo {
 private void foo(String bar) {
  bar = "something else";
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 if 구문의 사용을 피하도록 함"
         name="EmptyIfStmt"
         typeResolution="false">
      <description>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//IfStatement/Statement
 [EmptyStatement or Block[count(*) = 0]]
 
              </value>
         </property>
      </properties>
      <example>
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="mothod 레벨의 synchronization 보다 block 레벨 synchronization 을 사용하는 것이 바람직함"
         name="AvoidSynchronizedAtMethodLevel"
         typeResolution="false">
      <description>
  Method level synchronization can backfire when new code is added to the method.  Block-level
  synchronization helps to ensure that only the code that needs synchronization gets it.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
    
//MethodDeclaration[@Synchronized='true']
    
              </value>
         </property>
      </properties>
      <example>

public class Foo {
 // Try to avoid this
 synchronized void foo() {
 }
 // Prefer this:
 void bar() {
  synchronized(this) {
  }
 }
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="불필요한 Wrapper Object가 생성되었음."
         name="UnnecessaryWrapperObjectCreation"
         typeResolution="false">
      <description>
Parsing method should be called directy instead.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>

//PrimaryExpression[
PrimaryPrefix/Name[
@Image='Byte.valueOf' or
@Image='Short.valueOf' or
@Image='Integer.valueOf' or
@Image='Long.valueOf' or
@Image='Float.valueOf' or
@Image='Double.valueOf' or
@Image='Boolean.valueOf' or
@Image='Character.valueOf'
]
and
PrimarySuffix[
@Image='byteValue' or
@Image='shortValue' or
@Image='intValue' or
@Image='longValue' or
@Image='floatValue' or
@Image='doubleValue' or
@Image='booleanValue' or
@Image='charValue'
]]

              </value>
         </property>
      </properties>
      <example>

public int convert(String s) {
  int i, i2;

  i = Integer.valueOf(s).intValue(); // this wastes an object
  i = Integer.parseInt(s); // this is better

  i2 = Integer.valueOf(i).intValue(); // this wastes an object
  i2 = i; // this is better

  return i2;
}

          </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="괄호가 없어도 되는 상황에서 불필요한 괄호를 사용할 경우 마치 메소드 호출처럼 보여서 소스 코드의 가독성을 떨어뜨릴 수 있음."
         name="UnnecessaryParentheses"
         typeResolution="false">
      <description>
Sometimes expressions are wrapped in unnecessary parentheses,
making them look like a function call.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                
//ReturnStatement
          /Expression
           /PrimaryExpression
            /PrimaryPrefix
             /Expression[count(*)=1]
              /PrimaryExpression
              /PrimaryPrefix
            </value>
         </property>
      </properties>
      <example>
  public class Foo {
      boolean bar() {
          return (true);
      }
  }
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateMethodRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="사용되지 않는 Private Method ''{0}'' 가 선언되었음"
         name="UnusedPrivateMethod"
         typeResolution="true">
      <description>
Unused Private Method detects when a private method is declared but is unused.
    </description>
      <priority>2</priority>
      <example>

public class Something {
 private void foo() {} // unused
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unnecessary.UnnecessaryConversionTemporaryRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="기본 데이터(primitive type)를 String으로 변환할 때 불필요한 임시 변환 작업을 피하도록 함"
         name="UnnecessaryConversionTemporary"
         typeResolution="true">
      <description>
Avoid unnecessary temporaries when converting primitives to Strings
      </description>
      <priority>1</priority>
      <example>
  
public String convert(int x) {
  // this wastes an object
  String foo = new Integer(x).toString();
  // this is better
  return Integer.toString(x);
}
 
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 Method에 주석을 추가할것"
         name="UncommentedEmptyMethod"
         typeResolution="false">
      <description>
Uncommented Empty Method finds instances where a method does not contain
statements, but there is no comment. By explicitly commenting empty methods
it is easier to distinguish between intentional (commented) and unintentional
empty methods.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
    
//MethodDeclaration/Block[count(BlockStatement) = 0 and @containsComment = 'false']
 
             </value>
         </property>
      </properties>
      <example>
  
public void doSomething() {
}
 
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="피연산자내에 할당문이 사용됨.Code 를 복잡하고 가독성이 떨어지게 만듬"
         name="AssignmentInOperand"
         typeResolution="false">
      <description>
Avoid assignments in operands; this can make code more complicated and harder to read.
  </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
                    
//*[name()='WhileStatement' or name()='IfStatement']
 [Expression//AssignmentOperator]
                    
                </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  int x = 2;
  if ((x = getX()) == 3) {
   System.out.println("3!");
  }
 }
 private int getX() {
  return 3;
 }
}
  
  </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.StringToStringRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="String 객체에서 toString()함수를 사용하는 것은 불필요함"
         name="StringToString"
         typeResolution="true">
      <description>
    Avoid calling toString() on String objects; this is unnecessary
    </description>
      <priority>1</priority>
      <example>

public class Foo {
 private String baz() {
  String bar = "howdy";
  return bar.toString();
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.StringInstantiationRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="필요없는 Instance가 생성되어 있음"
         name="StringInstantiation"
         typeResolution="true">
      <description>
Avoid instantiating String objects; this is usually unnecessary.
    </description>
      <priority>1</priority>
      <example>

public class Foo {
 private String bar = new String("bar"); // just do a String bar = "bar";
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AvoidReassigningParametersRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{0}'' 처럼 파라미터 값을 직접 변경하지 말것"
         name="AvoidReassigningParameters"
         typeResolution="true">
      <description>
Reassigning values to parameters is a questionable practice.  Use a temporary local variable instead.
    </description>
      <priority>2</priority>
      <example>

public class Foo {
 private void foo(String bar) {
  bar = "something else";
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="final field를 Static 으로 변경하면 overhead 를 줄일 수 있음."
         name="FinalFieldCouldBeStatic"
         typeResolution="false">
      <description>
If a final field is assigned to a compile-time constant, it could be
made static, thus saving overhead in each object
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                    
//FieldDeclaration
 [@Final='true' and @Static='false']
 [not (../../../../ClassOrInterfaceDeclaration[@Interface='true'])]
   /VariableDeclarator/VariableInitializer/Expression
    /PrimaryExpression/PrimaryPrefix/Literal
                    
                </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public final int BAR = 42; // this could be static and save some space
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl="http://pmd.sourceforge.net/rules/logging-java.html#SystemPrintln"
         language="java"
         message="System.out.print 가 사용됨."
         name="SystemPrintln"
         since="2.1"
         typeResolution="false">
      <description>
System.(out|err).print is used, consider using a logger.
     </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                 
//Name[
    starts-with(@Image, 'System.out.print')
    or
    starts-with(@Image, 'System.err.print')
    ]
                
             </value>
         </property>
      </properties>
      <example>
 
class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());
    public void testA () {
        System.out.println("Entering test");
        // Better use this
        log.fine("Entering test");
    }
}

     </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.DuplicateImportsRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{0}'' import문이 중복 선언 되었음"
         name="DuplicateImports"
         typeResolution="true">
      <description>
    Avoid duplicate import statements.
    </description>
      <priority>1</priority>
      <example>

import java.lang.String;
import java.lang.*;
public class Foo {}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="내용이 없는   try 블록이 존재함"
         name="EmptyTryBlock"
         typeResolution="false">
      <description>
Avoid empty try blocks - what's the point?
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//TryStatement/Block[1][count(*) = 0]

              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  try {
  } catch (Exception e) {
    e.printStackTrace();
  }
 }
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="Switch구문에는 반드시 default label이 있어야 함"
         name="SwitchStmtsShouldHaveDefault"
         typeResolution="false">
      <description>
Switch statements should have a default label.
    </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                  
//SwitchStatement[not(SwitchLabel[@Default='true'])]
                  
              </value>
         </property>
      </properties>
      <example>

public class Foo {
 public void bar() {
  int x = 2;
  switch (x) {
   case 2: int j = 8;
  }
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="중괄호없이 사용된 while문의 사용은 피하라"
         name="WhileLoopsMustUseBraces"
         typeResolution="false">
      <description>
Avoid using 'while' statements without using curly braces
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//WhileStatement[not(Statement/Block)]

                </value>
         </property>
      </properties>
      <example>

public void doSomething() {
  while (true)
      x++;
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 if 구문의 사용을 피하도록 함"
         name="EmptyIfStmt"
         typeResolution="false">
      <description>
Empty If Statement finds instances where a condition is checked but nothing is done about it.
    </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//IfStatement/Statement
 [EmptyStatement or Block[count(*) = 0]]
 
              </value>
         </property>
      </properties>
      <example>
    
public class Foo {
 void bar(int x) {
  if (x == 0) {
   // empty!
  }
 }
}
 
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedPrivateFieldRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="사용되지 않는 Private field ''{0}'' 가 선언되었음"
         name="UnusedPrivateField"
         typeResolution="true">
      <description>
Detects when a private field is declared and/or assigned a value, but not used.
    </description>
      <priority>2</priority>
      <example>

public class Something {
  private static int FOO = 2; // Unused
  private int i = 5; // Unused
  private int j = 6;
  public int addOne() {
    return j++;
  }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="boolean 사용 시 불필요한 비교 연산을 피하도록 함"
         name="SimplifyBooleanExpressions"
         typeResolution="false">
      <description>
Avoid unnecessary comparisons in boolean expressions - this makes simple code seem complicated.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>

//EqualityExpression/PrimaryExpression
 /PrimaryPrefix/Literal/BooleanLiteral

              </value>
         </property>
      </properties>
      <example>
  
public class Bar {
 // can be simplified to
 // bar = isFoo();
 private boolean bar = (isFoo() == true);

 public isFoo() { return false;}
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="SimpleDateFormat 인스턴스를 생성할때 Locale 을 지정하는 것이 바람직함"
         name="SimpleDateFormatNeedsLocale"
         typeResolution="false">
      <description>
Be sure to specify a Locale when creating a new instance of SimpleDateFormat.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//AllocationExpression
 [ClassOrInterfaceType[@Image='SimpleDateFormat']]
 [Arguments[@ArgumentCount=1]]

                    </value>
         </property>
      </properties>
      <example>
        
public class Foo {
 // Should specify Locale.US (or whatever)
 private SimpleDateFormat sdf = new SimpleDateFormat("pattern");
}
        
        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.unusedcode.UnusedFormalParameterRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{1}'' 처럼  사용되지 않는  ''{0}'' 파라미터가 있음"
         name="UnusedFormalParameter"
         typeResolution="true">
      <description>
Avoid passing parameters to methods or constructors and then not using those parameters.
    </description>
      <priority>2</priority>
      <example>

public class Foo {
 private void bar(String howdy) {
  // howdy is not used
 }

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="Interface는 클래스의 behavior 을 구현하는 데에만 사용해야 함. "
         name="AvoidConstantsInterface"
         typeResolution="false">
      <description>
     An interface should be used only to model a behaviour of a
    class: using an interface as a container of constants is a poor usage pattern.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
    
    //ClassOrInterfaceDeclaration[@Interface="true"]
    [
     count(//MethodDeclaration)=0
     and
     count(//FieldDeclaration)&gt;0
    ]
    
        </value>
         </property>
      </properties>
      <example>
    
    public interface ConstantsInterface {
     public static final int CONSTANT1=0;
     public static final String CONSTANT2="1";
    }
    
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="finally block이 비어있음"
         name="EmptyFinallyBlock"
         typeResolution="false">
      <description>
Avoid empty finally blocks - these can be deleted.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//FinallyStatement[count(Block/BlockStatement) = 0]
 
              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 public void bar() {
  try {
    int x=2;
   } finally {
    // empty!
   }
 }
}
 
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="배열의 값을 루프문을 이용하여 복사하는 것 보다 System.arraycopy() 메소드를 이용하여 복사하는 것이 효율적이며 수행 속도가 빠름"
         name="AvoidArrayLoops"
         typeResolution="false">
      <description>
    Instead of copying data between two arrays, use
    System.arrayCopy method
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
    
//Statement[(ForStatement or WhileStatement) and
count(*//AssignmentOperator[@Image = '='])=1
and
*/Statement
[
./Block/BlockStatement/Statement/StatementExpression/PrimaryExpression
/PrimaryPrefix/Name/../../PrimarySuffix/Expression
[(PrimaryExpression or AdditiveExpression) and count
(.//PrimaryPrefix/Name)=1]//PrimaryPrefix/Name/@Image
and
./Block/BlockStatement/Statement/StatementExpression/Expression/PrimaryExpression
/PrimaryPrefix/Name/../../PrimarySuffix[count
(..//PrimarySuffix)=1]/Expression[(PrimaryExpression
or AdditiveExpression) and count(.//PrimaryPrefix/Name)=1]
//PrimaryPrefix/Name/@Image
]]
    
        </value>
         </property>
      </properties>
      <example>
    
public class Test {
 public void bar() {
  int[] a = new int[10];
  int[] b = new int[10];
  for (int i=0;i&lt;10;i++) {
   b[i]=a[i];
  }
 }
}
            // this will trigger the rule
            for (int i=0;i&lt;10;i++) {
             b[i]=a[c[i]];
            }

        }
    }
    
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.imports.ImportFromSamePackageRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="동일 패키지에 있을 때는 import문을 사용할 필요가 없음"
         name="ImportFromSamePackage"
         typeResolution="true">
      <description>
 No need to import a type that's in the same package.
     </description>
      <priority>1</priority>
      <example>
 
 package foo;
 import foo.Buz; // no need for this
 import foo.*; // or this
 public class Bar{}
 
     </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.naming.VariableNamingConventionsRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="''{0}'' 의 변수 ''{1}'' 이  ''{2}''  로 시작함"
         name="VariableNamingConventions"
         typeResolution="true">
      <description>
A variable naming conventions rule - customize this to your liking.  Currently, it
 checks that final variables should be all caps and non-final variables
 should not include underscores.
        </description>
      <priority>1</priority>
      <properties>
         <property name="memberSuffix" value=""/>
         <property name="memberPrefix" value=""/>
         <property name="staticSuffix" value=""/>
         <property name="staticPrefix" value=""/>
      </properties>
      <example>

public class Foo {
 public static final int MY_NUM = 0;
 public String myTest = "";
 DataModule dmTest = new DataModule();
}

        </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="Abstract Class내에  Abstract Method가 존재하지 않음"
         name="AbstractClassWithoutAbstractMethod"
         typeResolution="false">
      <description>
The abstract class does not contain any abstract methods. An abstract class suggests
an incomplete implementation, which is to be completed by subclasses implementing the
abstract methods. If the class is intended to be used as a base class only (not to be instantiated
direcly) a protected constructor can be provided prevent direct instantiation.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
//ClassOrInterfaceDeclaration
 [@Abstract='true'
  and count( .//MethodDeclaration[@Abstract='true'] )=0 ]
  [count(ImplementsList)=0]
              
              </value>
         </property>
      </properties>
      <example>

public abstract class Foo {
 void int method1() { ... }
 void int method2() { ... }
 // consider using abstract methods or removing
 // the abstract modifier and adding protected constructors
}

      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="필요없는 문장 (;)이 있음"
         name="EmptyStatementNotInLoop"
         typeResolution="false">
      <description>
An empty statement (aka a semicolon by itself) that is not used
as the sole body of a for loop or while loop is probably a bug.  It
could also be a double semicolon, which is useless and should be
removed.
       </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//Statement/EmptyStatement
 [not(
       ../../../ForStatement
       or ../../../WhileStatement
       or ../../../BlockStatement/ClassOrInterfaceDeclaration
       or ../../../../../../ForStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement
       or ../../../../../../WhileStatement/Statement[1]
        /Block[1]/BlockStatement[1]/Statement/EmptyStatement)
 ]

                </value>
         </property>
      </properties>
      <example>

public class MyClass {
   public void doit() {
      // this is probably not what you meant to do
      ;
      // the extra semicolon here this is not necessary
      System.out.println("look at the extra semicolon");;
   }
}

       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="String 을 append 할 경우, String.valueOf 함수를 사용할 필요 없음."
         name="UselessStringValueOf"
         typeResolution="false">
      <description>
Use valueOf() argument directly.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//AdditiveExpression[@Image='+']
[PrimaryExpression/PrimaryPrefix/Name[@Image='String.valueOf']]

              </value>
         </property>
      </properties>
      <example>

public String convert(int i) {
  String s;
  s = "a" + String.valueOf(i); // Bad
  s = "a" + i; // Better
  return s;
}

          </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.ImmutableFieldRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="생성자에서 Assign된 변수 ''{0}'' 를 Final로 선언하지 않았음"
         name="ImmutableField"
         typeResolution="true">
      <description>
Identifies private fields whose values never change once they are initialized either in the declaration of the field or by
a constructor.  This aids in converting existing classes to immutable classes.
      </description>
      <priority>1</priority>
      <example>
  
public class Foo {
  private int x; // could be final
  public Foo() {
      x = 7;
  }
  public void foo() {
     int a = x + 2;
  }
}
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="non-field 이름이 m_ 으로 시작함."
         name="MisleadingVariableName"
         typeResolution="false">
      <description>
Detects when a non-field has a name starting with 'm_'.  This usually
indicates a field and thus is confusing.
      </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
                    
//VariableDeclaratorId
[starts-with(@Image, 'm_')]
[not (../../../FieldDeclaration)]
                    
                </value>
         </property>
      </properties>
      <example>
  
  public class Foo {
    private int m_foo; // OK
    public void bar(String m_baz) {  // Bad
      int m_boz = 42; // Bad
    }
  }
  
      </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="빈 While 구문이 사용되었음. "
         name="EmptyWhileStmt"
         typeResolution="false">
      <description>
Empty While Statement finds all instances where a while statement
does nothing.  If it is a timing loop, then you should use Thread.sleep() for it; if
it's a while loop that does a lot in the exit expression, rewrite it to make it clearer.
       </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>

//WhileStatement/Statement[./Block[count(*) = 0]  or ./EmptyStatement]

              </value>
         </property>
      </properties>
      <example>
  
public class Foo {
 void bar(int a, int b) {
  while (a == b) {
   // empty!
  }
 }
}
 
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.design.AssignmentToNonFinalStaticRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="static 필드의 안전하지않은 사용 가능성"
         name="AssignmentToNonFinalStatic"
         typeResolution="true">
      <description>
Identifies a possible unsafe usage of a static field.
       </description>
      <priority>1</priority>
      <example>
   
public class StaticField {
   static int x;
   public FinalFields(int y) {
    x = y; // unsafe
   }
}
   
       </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="NullPointerException을 throw하는 것은 비추천"
         name="AvoidThrowingNullPointerException"
         typeResolution="false">
      <description>
Avoid throwing a NullPointerException - it's confusing because most people will assume that the
 virtual machine threw it.  Consider using an IllegalArgumentException instead; this will be
 clearly seen as a programmer initiated exception.
      </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
              
//AllocationExpression/ClassOrInterfaceType[@Image='NullPointerException']
   
          </value>
         </property>
      </properties>
      <example>
        
public class Foo {
 void bar() {
  throw new NullPointerException();
 }
}
  
      </example>
   </rule>
   <rule message="내용이 없는 Catch Block이 존재" ref="rulesets/java/basic.xml/EmptyCatchBlock">
      <priority>1</priority>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.InefficientEmptyStringCheckRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="Empty String 을 체크하기 위해 String.trim().length() 을 사용하는 것은 피하도록 함"
         name="InefficientEmptyStringCheck"
         typeResolution="true">
      <description>
	   String.trim().length() is an inefficient way to check if a String is really empty, as it 
	   creates a new String object just to check its size. Looping through a string, checking Character.isWhitespace()
	   on each character and returning false if a non-whitespace character is found is preferable
    </description>
      <priority>1</priority>
      <example>

public class Foo {
    void bar(String string) {
        if (string != null &amp;&amp; string.trim().size() &gt; 0) { 
		    doSomething();
        } 
    }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.java.rule.strings.InefficientStringBufferingRule"
         deprecated="false"
         dfa="false"
         externalInfoUrl=""
         message="StringBuffer 함수에서 nonliteral 을 직접 concatenate 하지 말 것"
         name="InefficientStringBuffering"
         typeResolution="true">
      <description>
Avoid concatenating non literals in a StringBuffer constructor or append().
    </description>
      <priority>2</priority>
      <example>

public class Foo {
 void bar() {
  // Avoid this
  StringBuffer sb=new StringBuffer("tmp = "+System.getProperty("java.io.tmpdir"));
  // use instead something like this
  StringBuffer sb = new StringBuffer("tmp = ");
  sb.append(System.getProperty("java.io.tmpdir"));
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="가공되지 않은 Exception을 throw하는 것은 비추천"
         name="AvoidThrowingRawExceptionTypes"
         typeResolution="false">
      <description>
Avoid throwing certain exception types.  Rather than throw a raw RuntimeException, Throwable,
 Exception, or Error, use a subclassed exception or error instead.
    </description>
      <priority>2</priority>
      <properties>
         <property name="xpath">
            <value>
            
//AllocationExpression
 /ClassOrInterfaceType[
 @Image='Throwable' or
 @Image='Exception' or
 @Image='Error' or
 @Image='RuntimeException']
 
        </value>
         </property>
      </properties>
      <example>
      
public class Foo {
public void bar() throws Exception {
  throw new Exception();
 }
}

    </example>
   </rule>
   <rule class="net.sourceforge.pmd.lang.rule.XPathRule" deprecated="false" dfa="false"
         externalInfoUrl=""
         language="java"
         message="null 값과 비교하기 위해 equals 함수를 사용하였음."
         name="EqualsNull"
         typeResolution="false">
      <description>
Newbie programmers sometimes get the comparison concepts confused
and use equals() to compare to null.
        </description>
      <priority>1</priority>
      <properties>
         <property name="xpath">
            <value>
    
//PrimaryExpression
 [
PrimaryPrefix/Name[ends-with(@Image, 'equals')]
or
PrimarySuffix[ends-with(@Image, 'equals')]
]
[PrimarySuffix/Arguments/ArgumentList[count(Expression)=1]
  /Expression/PrimaryExpression/PrimaryPrefix
   /Literal/NullLiteral]
    
                </value>
         </property>
      </properties>
      <example>
       
class Bar {
   void foo() {
       String x = "foo";
       if (x.equals(null)) { // bad!
        doSomething();
       }
   }
}
    
        </example>
   </rule>
</ruleset>