<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="aprvMng">	
	<!-- 결재정보 목록조회 -->
	<select id="getAprvList" resultType="HashMap" parameterType="map" >
		WITH VW_APRV_LINE AS (
			/* 진행 상태 정보 가져오기 */
		  SELECT
		    APRV_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '대기'
		        WHEN TOT_CNT = APRV_YN_1 THEN '완료'
		        WHEN APRV_YN_2 > 0 THEN '보류'
		        WHEN APRV_YN_3 > 0 THEN '반려'
		        ELSE '진행중'
		      END APRV_YN_NM
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '0'
		        WHEN TOT_CNT = APRV_YN_1 THEN '1'
		        WHEN APRV_YN_2 > 0 THEN '2'
		        WHEN APRV_YN_3 > 0 THEN '3'
		        ELSE '9'
		      END APRV_YN_TP
			, APRV_YN_1 AS APRV_YN_END_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '1'
		        WHEN TOT_CNT = APRV_YN_1 THEN '0'
		        WHEN APRV_YN_2 > 0 THEN '1'
		        WHEN APRV_YN_3 > 0 THEN '1'
		        ELSE '1'
		      END SORT_ORDR
		  FROM (
		    SELECT 
		      A.APRV_NO
		      , SUM(TOT_CNT) As TOT_CNT
		      , SUM(APRV_YN_0) AS APRV_YN_0		/* 대기 */
		      , SUM(APRV_YN_1) AS APRV_YN_1		/* 완료 */
		      , SUM(APRV_YN_2) AS APRV_YN_2		/* 보류 */
		      , SUM(APRV_YN_3) AS APRV_YN_3		/* 반려 */
		    FROM (
              SELECT 
                APRV_NO
                , COUNT(1) AS TOT_CNT
                , CASE
                    WHEN APRV_YN_CD = 0 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_0        /* 대기 */
                , CASE
                    WHEN APRV_YN_CD = 1 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_1        /* 완료 */
                , CASE
                    WHEN APRV_YN_CD = 2 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_2        /* 보류 */
                , CASE
                    WHEN APRV_YN_CD = 3 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_3        /* 반려 */
              FROM STD_APRV_LINE 
              WHERE NVL(REFE_YN, 'N') = 'N'
              GROUP BY APRV_NO, APRV_YN_CD ,NVL(REFE_YN, 'N')
		    ) A
		    GROUP BY A.APRV_NO
		  )
		)
		, VW_STD_LINE AS (
		  SELECT
		    APRV_NO, APRV_YN_CD, APRV_ORDR, CONF_YN, REFE_YN
		  FROM STD_APRV_LINE
		  WHERE APRV_EMP_NO = #{uss_id}
		)
		, VW_STD_CONF AS (
			SELECT C.APRV_NO, C.CONF_YN
	          FROM STD_APRV_LINE C
	         WHERE (C.APRV_NO || '_' || C.APRV_ORDR) IN (  SELECT    B.APRV_NO
	                                                              || '_'
	                                                              || MAX (B.APRV_ORDR)
	                                                         FROM STD_APRV_MNG A,
	                                                              STD_APRV_LINE B
	                                                        WHERE     A.REPT_APRV_NO =
	                                                                     #{uss_id}
	                                                              AND A.APRV_NO = B.APRV_NO
	                                                     GROUP BY B.APRV_NO)
	        UNION
			SELECT B.APRV_NO, B.CONF_YN
				FROM STD_APRV_LINE B
			WHERE B.APRV_EMP_NO = #{uss_id}
		)
		, VW_STD_CONF_Y AS (
		    SELECT
		      C.APRV_NO
		      , SUM(C.CONF_Y_CNT) AS CONF_Y_CNT
              , SUM(C.CONF_Y_CNT) AS CONF_REFE_CNT
		    FROM (
		          SELECT 
		            B.APRV_NO
		            , CASE
		                WHEN B.CONF_YN = 'Y' THEN COUNT(1)
		                ELSE 0
		             END CONF_Y_CNT
                    , CASE
                        WHEN B.CONF_YN = 'Y' AND NVL(B.REFE_YN, 'N') = 'Y' THEN COUNT(1)
                        ELSE 0
                     END CONF_REFE_CONT
		          FROM STD_APRV_MNG A
		              , STD_APRV_LINE B
		          WHERE (A.REPT_APRV_NO = #{uss_id} OR B.APRV_EMP_NO = #{uss_id})
		            AND A.APRV_NO = B.APRV_NO
		          GROUP BY B.APRV_NO, B.CONF_YN, NVL(B.REFE_YN, 'N')
		        ) C
		    GROUP BY C.APRV_NO
		)
		SELECT A.APRV_NO					/* 결재번호 */
		     , A.REPT_APRV_NO			/* 보고자사원번호(임시로 회원ID사용) */
		     , B.USS_NM AS REPT_APRV_NM
		     , A.TITLE							/* 제목 */
		     , A.PROJ_CD						/* 프로젝트코드 */
		     , A.TERM_ST_YM				/* 기간시작일자 */
		     , A.TERM_ED_YM				/* 기간종료일자 */
<!-- 		     , A.REPT_CONT					/* 보고내용 */ -->
<!-- 		     , A.HALF_TYPE_CD				/* 반차구분코드 */ -->
<!-- 		     , A.PLACE							/* 행선지 */ -->
		     , C.CD_NM AS APRV_TYPE_NM
		     , NVL(E.APRV_YN_NM, '대기') AS APRV_YN_NM
		     , TO_CHAR(A.CRTN_DT, 'YYYY-MM-DD') AS CRTN_DT
		     , DECODE(F.APRV_NO, null, 'N', 'Y') AS LINE_CHK
		     , F.APRV_YN_CD AS LINE_APRV_YN_CD
		     , E.APRV_YN_END_NO
		     , F.APRV_ORDR
		     , E.APRV_YN_TP
			 , CASE 
			     WHEN F.CONF_YN IS NULL THEN G.CONF_YN
			     ELSE F.CONF_YN
			  END CONF_YN
			 , H.CONF_Y_CNT
			 , NVL(F.REFE_YN, 'N') AS REFE_YN
			 , H.CONF_REFE_CNT
			 
			 <!-- (SELECT AB.APRV_EMP_NO
		          FROM STD_APRV_MNG AA
		             , STD_APRV_LINE AB
		         WHERE 1=1
		           AND AA.APRV_NO = A.APRV_NO
		           AND AA.APRV_NO = AB.APRV_NO
		           AND AB.APRV_ORDR = (SELECT MIN(AAA.APRV_ORDR)
		                                FROM STD_APRV_LINE AAA
		                               WHERE AAA.APRV_YN_CD IN 0
		                                 AND AAA.APRV_ORDR NOT IN 0
		                                 AND AAA.APRV_NO = AA.APRV_NO
		                               GROUP BY AAA.APRV_NO)) AS APRV_ID -->
		     , Y.APRV_ID	/* 현재 결재할 사람의 ID */
             , A.CAL_NO		/* 캘린더 번호*/
             <!-- 2022.01.12 추가 조회 항목 : BEGIN  -->
             , A.APRV_TYPE_DTIL_CD /*결재상세코드*/
             , (SELECT S.CD_NM FROM STD_CD_MNG S WHERE S.CD = A.APRV_TYPE_DTIL_CD) AS APRV_TYPE_DTIL_NM /*결재상세코드명칭*/
             , Z.SUM_DAY_CNT /*휴가기간*/
             , A.MODI_DT /*상신일*/
             <!-- 2022.01.12 추가 조회 항목 : BEGIN  -->
			 
		 FROM STD_APRV_MNG A
		    LEFT OUTER JOIN STD_USS_MNG B ON B.USS_ID = A.REPT_APRV_NO
		    LEFT OUTER JOIN STD_CD_MNG C ON C.UP_CD = 'CD0001' AND C.CD = A.APRV_TYPE_CD
		    LEFT OUTER JOIN VW_APRV_LINE E ON E.APRV_NO = A.APRV_NO
		    LEFT OUTER JOIN VW_STD_LINE F ON F.APRV_NO = A.APRV_NO 
			LEFT OUTER JOIN VW_STD_CONF G ON G.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_STD_CONF_Y H ON H.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN (SELECT
			                        APRV_NO
			                      , SUM(VCT_DAY_CNT) AS SUM_DAY_CNT
			                   FROM VCT_INF_MNG
			                   GROUP BY APRV_NO
			                 ) Z ON (Z.APRV_NO = A.APRV_NO)
			<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField3)" >
			LEFT OUTER JOIN STD_APRV_LINE I ON I.APRV_NO = E.APRV_NO
			LEFT OUTER JOIN STD_USS_MNG J ON J.USS_ID = I.APRV_EMP_NO
			</if>
			<!-- 2022.01.17 테이블 조인 추가 - 현재 결재할 사람의 ID 조회용 : BEGIN -->
			LEFT OUTER JOIN (SELECT AB.APRV_EMP_NO AS APRV_ID
			                      , AA.APRV_NO AS APRV_NO
					          FROM STD_APRV_MNG AA
					             , STD_APRV_LINE AB
					         WHERE 1=1
					           AND AA.APRV_NO = AB.APRV_NO
					           AND AB.APRV_ORDR = (SELECT MIN(AAA.APRV_ORDR)
					                                FROM STD_APRV_LINE AAA
					                               WHERE AAA.APRV_YN_CD IN 0
					                                 AND AAA.APRV_ORDR NOT IN 0
					                                 AND AAA.APRV_NO = AA.APRV_NO
					                               GROUP BY AAA.APRV_NO)  ) Y ON (Y.APRV_NO = A.APRV_NO) 
			<!-- 2022.01.17 테이블 조인 추가 - 현재 결재할 사람의 ID 조회용 : BEGIN -->
		WHERE 1=1
		<if test='uss_auth_cd != "ROLE_ADMIN"'>
			AND ( A.REPT_APRV_NO = #{uss_id}
					OR A.APRV_NO IN (SELECT APRV_NO FROM STD_APRV_LINE WHERE APRV_EMP_NO = #{uss_id}) )		/* 만약 결재자 일경우에 결재가 완료된 정보를 안보여줄경우  */
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField)" >
			<choose>
				<when test='searchGubun == "01"' >
			AND A.TITLE LIKE '%' || #{searchField} || '%'
				</when>
				<when test='searchGubun == "02"' >
			AND REPT_CONT LIKE '%' || #{searchField} || '%'	
				</when>
			</choose>
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList1)" >	<!-- 결재구분 -->
			AND A.APRV_TYPE_CD = UPPER(#{searchCdList1})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList2)" >	<!-- 확인유무 -->
			AND  (G.CONF_YN = #{searchCdList2} OR F.CONF_YN = #{searchCdList2})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList3)" >	<!-- 결재상태 -->
			AND E.APRV_YN_TP = #{searchCdList3} 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField2)" >	<!-- 보고자 -->
			AND B.USS_NM LIKE '%' || #{searchField2} || '%' 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField3)" >	<!-- 결재자 -->
			AND J.USS_NM LIKE '%' || #{searchField3} || '%' 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(stDtSrch)" >	<!-- 기간 시작날짜 -->
			AND A.CRTN_DT >= TO_DATE(#{stDtSrch}, 'YYYY-MM-DD') 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(edDtSrch)" >	<!-- 기간 끝날짜 -->
			AND A.CRTN_DT <![CDATA[<=]]> TO_DATE(#{edDtSrch}, 'YYYY-MM-DD') 
		</if>
		<choose>
			<when test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList5)">
				AND B.DP_CD = #{searchCdList5}
			</when>
			<otherwise>
				<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList4)"> <!-- 소속(보고자)  --> 
					AND B.DP_CD = #{searchCdList4}
				</if>
			</otherwise>		
		</choose>
		<!-- 2022.01.12 검색조건 추가 : BEGIN  -->
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(ussId)" >	<!-- 사원ID -->
			AND A.REPT_APRV_NO = #{ussId}
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(stddYr)" >	<!-- 기준년도 -->
			AND A.APRV_TYPE_CD = 'CD0001011'
			AND SUBSTR(A.TERM_ST_YM, 1, 4) = #{stddYr}
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(startMon)" >	<!-- 시작월 -->
			AND TO_NUMBER(SUBSTR(A.TERM_ST_YM, 6, 2)) >=  TO_NUMBER(#{startMon})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(endMon)" >	<!-- 종료월 -->
			AND TO_NUMBER(SUBSTR(A.TERM_ST_YM, 6, 2)) <![CDATA[<=]]> TO_NUMBER(#{endMon})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(vctTypeCd)" >	<!-- 휴가구분 -->
			AND A.APRV_TYPE_DTIL_CD = #{vctTypeCd}
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(aprvStatCd)" >	<!-- 결재상태구분 -->
			AND E.APRV_YN_TP = #{aprvStatCd}
		</if>
		<!-- 2022.01.12 검색조건 추가 : END -->
		<!-- 2022.01.17 검색조건 추가 : BEGIN -->
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList6)" >	<!-- 결재구분 (전체, 결재, 참조) -->
			AND F.APRV_NO IS NOT NULL
			
			<if test='searchCdList6 == "0"' >	<!-- 결재 -->
				AND (F.REFE_YN IS NULL OR F.REFE_YN != 'Y')
			</if>
			
			<if test='searchCdList6 == "1"' >	<!-- 참조 -->
				AND F.REFE_YN = 'Y'
			</if>
			
			
		</if>
		<if test='myAprvList == "Y"' >	<!-- 내결재문서보기 -->
			AND Y.APRV_ID = #{uss_id}
		</if>
		<!-- 2022.01.17 검색조건 추가 : END -->
		
		
		
		ORDER BY E.SORT_ORDR DESC, A.CRTN_DT DESC
<!-- 		           A.CRTN_DT DESC, A.TERM_ST_YM ASC, TO_NUMBER(A.APRV_NO) ASC -->
	</select>
	<!-- 총건수 -->
	<select id="getAprvTotalCount" resultType="int" parameterType="map" >
		WITH VW_APRV_LINE AS (
			/* 진행 상태 정보 가져오기 */
		  SELECT
		    APRV_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '대기'
		        WHEN TOT_CNT = APRV_YN_1 THEN '완료'
		        WHEN APRV_YN_2 > 0 THEN '보류'
		        WHEN APRV_YN_3 > 0 THEN '반려'
		        ELSE '진행중'
		      END APRV_YN_NM
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '0'
		        WHEN TOT_CNT = APRV_YN_1 THEN '1'
		        WHEN APRV_YN_2 > 0 THEN '2'
		        WHEN APRV_YN_3 > 0 THEN '3'
		        ELSE '9'
		      END APRV_YN_TP
			, APRV_YN_1 AS APRV_YN_END_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '1'
		        WHEN TOT_CNT = APRV_YN_1 THEN '0'
		        WHEN APRV_YN_2 > 0 THEN '1'
		        WHEN APRV_YN_3 > 0 THEN '1'
		        ELSE '1'
		      END SORT_ORDR
		  FROM (
		    SELECT 
		      A.APRV_NO
		      , SUM(TOT_CNT) As TOT_CNT
		      , SUM(APRV_YN_0) AS APRV_YN_0		/* 대기 */
		      , SUM(APRV_YN_1) AS APRV_YN_1		/* 완료 */
		      , SUM(APRV_YN_2) AS APRV_YN_2		/* 보류 */
		      , SUM(APRV_YN_3) AS APRV_YN_3		/* 반려 */
		    FROM (
              SELECT 
                APRV_NO
                , COUNT(1) AS TOT_CNT
                , CASE
                    WHEN APRV_YN_CD = 0 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_0        /* 대기 */
                , CASE
                    WHEN APRV_YN_CD = 1 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_1        /* 완료 */
                , CASE
                    WHEN APRV_YN_CD = 2 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_2        /* 보류 */
                , CASE
                    WHEN APRV_YN_CD = 3 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_3        /* 반려 */
              FROM STD_APRV_LINE 
              WHERE NVL(REFE_YN, 'N') = 'N'
              GROUP BY APRV_NO, APRV_YN_CD ,NVL(REFE_YN, 'N')
		    ) A
		    GROUP BY A.APRV_NO
		  )
		)
		, VW_STD_LINE AS (
			/* 결재자관련 정보 */			
			SELECT
			  APRV_NO, APRV_YN_CD, APRV_ORDR, CONF_YN, REFE_YN
			FROM STD_APRV_LINE
			WHERE APRV_EMP_NO = #{uss_id}
		)
	    , VW_STD_CONF AS (
	    	/* 확인 유무 정보 */
			SELECT C.APRV_NO, C.CONF_YN
	          FROM STD_APRV_LINE C
	         WHERE (C.APRV_NO || '_' || C.APRV_ORDR) IN (  SELECT    B.APRV_NO
	                                                              || '_'
	                                                              || MAX (B.APRV_ORDR)
	                                                         FROM STD_APRV_MNG A,
	                                                              STD_APRV_LINE B
	                                                        WHERE     A.REPT_APRV_NO =
	                                                                     #{uss_id}
	                                                              AND A.APRV_NO = B.APRV_NO
	                                                     GROUP BY B.APRV_NO)
	        UNION
			SELECT B.APRV_NO, B.CONF_YN
				FROM STD_APRV_LINE B
			WHERE B.APRV_EMP_NO = #{uss_id}
	    )
		SELECT COUNT(1) AS CNT
		 FROM STD_APRV_MNG A
		    LEFT OUTER JOIN VW_STD_LINE F ON F.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_STD_CONF G ON G.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_APRV_LINE E ON E.APRV_NO = A.APRV_NO
			<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField2) or @kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList4)" >
			LEFT OUTER JOIN STD_USS_MNG H ON H.USS_ID = A.REPT_APRV_NO
			</if>
			<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField3)" >
			LEFT OUTER JOIN STD_APRV_LINE I ON I.APRV_NO = E.APRV_NO
			LEFT OUTER JOIN STD_USS_MNG J ON J.USS_ID = I.APRV_EMP_NO
			</if>
			<!-- 2022.01.17 테이블 조인 추가 - 현재 결재할 사람의 ID 조회용 : BEGIN -->
			LEFT OUTER JOIN (SELECT AB.APRV_EMP_NO AS APRV_ID
			                      , AA.APRV_NO AS APRV_NO
					          FROM STD_APRV_MNG AA
					             , STD_APRV_LINE AB
					         WHERE 1=1
					           AND AA.APRV_NO = AB.APRV_NO
					           AND AB.APRV_ORDR = (SELECT MIN(AAA.APRV_ORDR)
					                                FROM STD_APRV_LINE AAA
					                               WHERE AAA.APRV_YN_CD IN 0
					                                 AND AAA.APRV_ORDR NOT IN 0
					                                 AND AAA.APRV_NO = AA.APRV_NO
					                               GROUP BY AAA.APRV_NO)  ) Y ON (Y.APRV_NO = A.APRV_NO) 
			<!-- 2022.01.17 테이블 조인 추가 - 현재 결재할 사람의 ID 조회용 : END -->
		WHERE 1=1
		<if test='uss_auth_cd != "ROLE_ADMIN"'>
			AND( A.REPT_APRV_NO = #{uss_id}
				OR A.APRV_NO IN (SELECT APRV_NO FROM STD_APRV_LINE WHERE APRV_EMP_NO = #{uss_id}) )		<!-- 만약 결재자 일경우에 결재가 완료된 정보를 안보여줄경우  -->
<!-- 					OR ( A.APRV_NO IN (SELECT APRV_NO FROM STD_APRV_LINE WHERE APRV_EMP_NO = #{uss_id}) AND E.APROV_YN != '완료' ) )	 --> <!-- 만약 결재자 일경우에 결재가 완료된 정보를 안보여줄경우  -->
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField)" >
			<choose>
				<when test='searchGubun == "01"' >
			AND A.TITLE LIKE '%' || #{searchField} || '%'
				</when>
				<when test='searchGubun == "02"' >
			AND A.REPT_CONT LIKE '%' || #{searchField} || '%'	
				</when>
			</choose>
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList1)" >	<!-- 결재구분 -->
			AND A.APRV_TYPE_CD = UPPER(#{searchCdList1})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList2)" >	<!-- 확인유무 -->
			AND  (G.CONF_YN = #{searchCdList2} OR F.CONF_YN = #{searchCdList2})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList3)" >	<!-- 결재상태 -->
			AND E.APRV_YN_TP = #{searchCdList3} 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField2)" >	<!-- 보고자 -->
			AND H.USS_NM LIKE '%' || #{searchField2} || '%' 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField3)" >	<!-- 결재자 -->
			AND J.USS_NM LIKE '%' || #{searchField3} || '%' 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(stDtSrch)" >	<!-- 기간 시작날짜 -->
			AND A.CRTN_DT >= TO_DATE(#{stDtSrch}, 'YYYY-MM-DD') 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(edDtSrch)" >	<!-- 기간 끝날짜 -->
			AND A.CRTN_DT <![CDATA[<=]]> TO_DATE(#{edDtSrch}, 'YYYY-MM-DD') 
		</if>
		<choose>
			<when test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList5)">
				AND H.DP_CD = #{searchCdList5}
			</when>
			<otherwise>
				<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList4)"> <!-- 소속(보고자)  --> 
					AND H.DP_CD = #{searchCdList4}
				</if>
			</otherwise>		
		</choose>
		
		<!-- 2022.01.12 검색조건 추가 : BEGIN  -->
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(ussId)" >	<!-- 사원ID -->
			AND A.REPT_APRV_NO = #{ussId}
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(stddYr)" >	<!-- 기준년도 -->
			AND A.APRV_TYPE_CD = 'CD0001011'
			AND SUBSTR(A.TERM_ST_YM, 1, 4) = #{stddYr}
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(startMon)" >	<!-- 시작월 -->
			AND TO_NUMBER(SUBSTR(A.TERM_ST_YM, 6, 2)) >=  TO_NUMBER(#{startMon})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(endMon)" >	<!-- 종료월 -->
			AND TO_NUMBER(SUBSTR(A.TERM_ST_YM, 6, 2)) <![CDATA[<=]]> TO_NUMBER(#{endMon})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(vctTypeCd)" >	<!-- 휴가구분 -->
			AND A.APRV_TYPE_DTIL_CD = #{vctTypeCd}
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(aprvStatCd)" >	<!-- 결재상태구분 -->
			AND E.APRV_YN_TP = #{aprvStatCd}
		</if>
		<!-- 2022.01.12 검색조건 추가 : END -->
		<!-- 2022.01.17 검색조건 추가 : BEGIN -->
		<!-- 결재구분 (전체, 결재, 참조) -->
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList6)" >	
			AND F.APRV_NO IS NOT NULL
			
			<if test='searchCdList6 == "0"' >	<!-- 결재 -->
				AND (F.REFE_YN IS NULL OR F.REFE_YN != 'Y')
			</if>
			
			<if test='searchCdList6 == "1"' >	<!-- 참조 -->
				AND F.REFE_YN = 'Y'
			</if>
				
		</if>
		<if test='myAprvList == "Y"' >	<!-- 내결재문서보기 -->
			AND Y.APRV_ID = #{uss_id}
		</if>
		<!-- 2022.01.17 검색조건 추가 : END -->
		
	</select>
	
	<!-- 결재정보 상세조회 -->
	<select id="getAprvView" resultType="HashMap" parameterType="map" >
		WITH VW_LINE_CNT AS (
			
			/* 진행 상태 정보 가져오기 */
		  SELECT
		    APRV_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '0'
		        WHEN TOT_CNT = APRV_YN_1 THEN '1'
		        WHEN APRV_YN_2 > 0 THEN '2'
		        WHEN APRV_YN_3 > 0 THEN '3'
		        ELSE '9'
		      END APRV_LINE_CD
		  FROM (
		    SELECT 
		      A.APRV_NO
		      , SUM(TOT_CNT) As TOT_CNT
		      , SUM(APRV_YN_0) AS APRV_YN_0		/* 대기 */
		      , SUM(APRV_YN_1) AS APRV_YN_1		/* 완료 */
		      , SUM(APRV_YN_2) AS APRV_YN_2		/* 보류 */
		      , SUM(APRV_YN_3) AS APRV_YN_3		/* 반려 */
		    FROM (
              SELECT 
                APRV_NO
                , COUNT(1) AS TOT_CNT
                , CASE
                    WHEN APRV_YN_CD = 0 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_0        /* 대기 */
                , CASE
                    WHEN APRV_YN_CD = 1 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_1        /* 완료 */
                , CASE
                    WHEN APRV_YN_CD = 2 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_2        /* 보류 */
                , CASE
                    WHEN APRV_YN_CD = 3 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_3        /* 반려 */
              FROM STD_APRV_LINE 
              WHERE NVL(REFE_YN, 'N') = 'N'
              GROUP BY APRV_NO, APRV_YN_CD ,NVL(REFE_YN, 'N')
		    ) A
		    GROUP BY A.APRV_NO
		  )
		)
		, VW_CONF_Y AS (
			SELECT
				APRV_NO
				, CASE
					WHEN CONF_TOT = CONF_N THEN 'N'
					ELSE 'Y'
				END CONF_TYPE
			FROM (
				SELECT
					APRV_NO
					, SUM(CONF_TOT) AS CONF_TOT
					, SUM(CONF_N) AS CONF_N
				FROM (
					SELECT
						APRV_NO
						, COUNT(1) AS CONF_TOT
						, CASE
							WHEN CONF_YN = 'N' THEN COUNT(1)
							ELSE 0
						END CONF_N
					FROM
						STD_APRV_LINE
					WHERE APRV_NO = #{aprv_no}
						AND NVL(REFE_YN, 'N') = 'N'
					GROUP BY APRV_NO, CONF_YN
				)
				GROUP BY APRV_NO
			)
		)
        , VW_ORGNZT AS (
            SELECT USS.USS_ID
                 , DP.DP_NM
              FROM STD_USS_MNG USS
                      LEFT OUTER JOIN (
                          SELECT 
                            CD AS DP_CD, LTRIM (SYS_CONNECT_BY_PATH (CD_NM, ' > '), ' > ') AS DP_NM
                        FROM STD_CD_MNG
                          START WITH UP_CD = 'CD0008'
                          CONNECT BY PRIOR CD = UP_CD
                        ORDER SIBLINGS BY CD_ORD ASC
                    ) DP ON DP.DP_CD = USS.DP_CD
        )
		SELECT A.APRV_NO					/* 결재번호 */
			, A.REPT_APRV_NO				/* 보고자사원번호 */
			, B.USS_NM AS REPT_APRV_NM
			, A.REPT_AUTH_CD AS REPT_AUTH_CD /* 보고자 직급 코드 */
			, (SELECT AUTHOR_NM FROM STD_AUT_INFO WHERE AUTHOR_CODE = A.REPT_AUTH_CD) AS REPT_AUTH_NM /* 보고자 직급 명 */
			, A.REPT_DP_CD AS REPT_DP_CD /* 보고자 부서 코드 */
			, (SELECT CD_NM FROM STD_CD_MNG WHERE CD = A.REPT_DP_CD) AS REPT_DP_NM /* 보고자 부서 명 */
			, A.APRV_TYPE_CD				/* 결재구분코드(UP_CD=VarConsts.EAM_MASTER_CODE) */
			, A.APRV_TYPE_DTIL_CD				/* 결재구분상세코드 */
			, A.TITLE					/* 제목 */
			, A.PROJ_CD					/* 프로젝트코드 */
			, (SELECT S.CD_NM FROM STD_CD_MNG S WHERE S.CD = A.PROJ_CD) AS PROJ_NM /*프로젝트 명칭*/
			, A.TERM_ST_YM					/* 기간시작일자 */
			, A.TERM_ED_YM					/* 기간종료일자 */
			, A.TERM_ST_HM					/* 기간시작시간 */
			, A.TERM_ED_HM					/* 기간종료시간 */
			, SUBSTR(A.TERM_ST_HM, 1, 2) TERM_ST_H
			, SUBSTR(A.TERM_ST_HM, 3, 4) TERM_ST_M
			, SUBSTR(A.TERM_ED_HM, 1, 2) TERM_ED_H
			, SUBSTR(A.TERM_ED_HM, 3, 4) TERM_ED_M
			, A.REPT_CONT					/* 보고내용 */
			, A.HALF_TYPE_CD_ST				/* 시작일자반차구분코드 */
			, A.HALF_TYPE_CD_ED				/* 종료일자반차구분코드 */
			, A.PLACE					/* 행선지 */
			, NVL(C.APRV_LINE_CD, '0') AS APRV_LINE_CD
			, D.CONF_TYPE					/* 확인 유무 */
			, E.DP_NM AS dpNm
			, A.CAL_NO		/* 캘린더 번호 */
			, TO_CHAR(CRTN_DT, 'YYYY-MM-DD') CRTN_DT /* 작성일 */
			<!-- 2022.01.17 휴가 신청 상세 조회 시 조회 항목 추가 : BEGIN  -->
			, F.FROGH_RSN /*휴가사유*/
			, F.ADDR /*행선지*/
			, F.CTTPLC /*연락처*/
			, G.VCT_DAY_CNT /*휴가사용일수*/
			<!-- 2022.01.17 휴가 신청 상세 조회 시 조회 항목 추가 : END  -->
			
			
		FROM STD_APRV_MNG A
			LEFT OUTER JOIN STD_USS_MNG B ON B.USS_ID = A.REPT_APRV_NO
			LEFT OUTER JOIN VW_LINE_CNT C ON C.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_CONF_Y D ON D.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_ORGNZT E ON E.USS_ID = A.REPT_APRV_NO
			LEFT OUTER JOIN DOC_FROGH F ON F.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN (
							 SELECT APRV_NO
							      , SUM(VCT_DAY_CNT) AS VCT_DAY_CNT
							   FROM VCT_INF_MNG
							   GROUP BY APRV_NO ) G ON G.APRV_NO = A.APRV_NO
		WHERE A.APRV_NO = #{aprv_no}
	</select>
	
	<!-- 결재정보 등록 -->
	<insert id="aprvInsert" parameterType="map" >
		<selectKey keyProperty="aprv_no" resultType="String" order="BEFORE">
			SELECT NVL(MAX(TO_NUMBER(aprv_no)),0)+1
			 FROM STD_APRV_MNG
		</selectKey>
		INSERT INTO STD_APRV_MNG
			(
				APRV_NO
			  , REPT_APRV_NO
			  , APRV_TYPE_CD
			  , APRV_TYPE_DTIL_CD
			  , TITLE
			  , PROJ_CD
			  , TERM_ST_YM
			  , TERM_ED_YM
			  , REPT_CONT
			  , HALF_TYPE_CD
			  , PLACE
			  , CRTN_EMP_NO
			  , CRTN_DT
			  , MODI_EMP_NO
			  , MODI_DT
			  , TERM_ST_HM
			  , TERM_ED_HM
			  , REPT_DP_CD
			  , REPT_AUTH_CD
			) VALUES
			(
				#{aprv_no}
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , #{cdList1, jdbcType=VARCHAR}
			  , #{cdList2, jdbcType=VARCHAR}
			  , #{title, jdbcType=VARCHAR}
			  , #{proj_cd, jdbcType=VARCHAR}
			  , #{term_st_ym, jdbcType=VARCHAR}
			  , #{term_ed_ym, jdbcType=VARCHAR}
			  , #{rept_cont, jdbcType=VARCHAR}
			  , #{half_type_cd, jdbcType=VARCHAR}
			  , #{place, jdbcType=VARCHAR}
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			  , #{term_st_hm, jdbcType=VARCHAR}
			  , #{term_ed_hm, jdbcType=VARCHAR}
			  , #{rept_dp_cd, jdbcType=VARCHAR}
			  , #{rept_auth_cd, jdbcType=VARCHAR}
			)
	</insert>
	
	<!-- 결재정보 수정 -->
	<update id="aprvUpdate" parameterType="map" >
		UPDATE STD_APRV_MNG
		      SET APRV_TYPE_CD = #{cdList1, jdbcType=VARCHAR}
		          , APRV_TYPE_DTIL_CD = #{cdList2, jdbcType=VARCHAR}
		          , TITLE = #{title, jdbcType=VARCHAR}
		          , PROJ_CD = #{proj_cd, jdbcType=VARCHAR}
		          , TERM_ST_YM = #{term_st_ym, jdbcType=VARCHAR}
		          , TERM_ED_YM = #{term_ed_ym, jdbcType=VARCHAR}
		          , REPT_CONT = #{rept_cont, jdbcType=VARCHAR}
		          , HALF_TYPE_CD = #{half_type_cd, jdbcType=VARCHAR}
		          , PLACE = #{place, jdbcType=VARCHAR}
		          , MODI_EMP_NO = #{rept_aprv_no, jdbcType=VARCHAR}
		          , MODI_DT = SYSDATE
		          , CAL_NO = #{cal_no, jdbcType=VARCHAR}
		          , TERM_ST_HM = #{term_st_hm, jdbcType=VARCHAR}
			      , TERM_ED_HM = #{term_ed_hm, jdbcType=VARCHAR}
			      , REPT_DP_CD = #{rept_dp_cd, jdbcType=VARCHAR}
			      , REPT_AUTH_CD = #{rept_auth_cd, jdbcType=VARCHAR}
		 WHERE APRV_NO = #{aprv_no, jdbcType=VARCHAR}
	</update>
	
	<!-- 결재정보 삭제 -->
	<delete id="aprvDelete" parameterType="map" >
		DELETE FROM STD_APRV_MNG
		WHERE APRV_NO = #{aprv_no, jdbcType=VARCHAR}
	</delete>
	
	<!-- 결재라인 등록 -->
	<insert id="aprvLineInsert" parameterType="map" >
		INSERT INTO STD_APRV_LINE
			(
				APRV_NO
			  , APRV_EMP_NO
			  , APRV_ORDR
			  , APRV_YM
			  , APRV_YN_CD
			  , APRV_CONT
			  , CRTN_EMP_NO
			  , CRTN_DT
			  , MODI_EMP_NO
			  , MODI_DT
			  , CONF_YN
			  , REFE_YN
			  , APRV_EMP_AUTH_CD
			) VALUES
			(
				#{aprv_no, jdbcType=VARCHAR}
			  , #{aprv_emp_no, jdbcType=VARCHAR}
			  , #{aprv_ordr, jdbcType=VARCHAR}
			  , #{aprv_ym, jdbcType=VARCHAR}
			  , #{aprv_yn_cd, jdbcType=VARCHAR}
			  , #{aprv_cont, jdbcType=VARCHAR}
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			  , 'N'
			  , #{refe_yn, jdbcType=VARCHAR}
			  , (SELECT USS_AUTH_CD FROM STD_USS_MNG WHERE USS_ID = #{aprv_emp_no, jdbcType=VARCHAR})
			)
	</insert>
	
	<!-- 결재라인 삭제 -->
	<delete id="aprvLineDelete" parameterType="map" >
		DELETE FROM STD_APRV_LINE
		WHERE APRV_NO = #{aprv_no, jdbcType=VARCHAR}
	</delete>
	<!-- 결재라인 목록정보 -->
	<select id="aprvLineList" resultType="hashMap" parameterType="map" >
		SELECT
		  A.APRV_NO
		  , A.APRV_EMP_NO
		  , (SELECT AUTHOR_NM FROM STD_AUT_INFO WHERE AUTHOR_CODE = A.APRV_EMP_AUTH_CD) AS APRV_AUTH_NM
		  , A.APRV_ORDR
		  , A.APRV_YN_CD
		  , A.APRV_CONT
		  , CASE
		  		WHEN A.REFE_YN = 'Y' THEN ''
		  		WHEN A.APRV_YN_CD = '1' THEN '승인'
		  		WHEN A.APRV_YN_CD = '2' THEN '보류'
		  		WHEN A.APRV_YN_CD = '3' THEN '반려'
		  		ELSE '대기'		/* '0' */
		  	END APRV_YN_NM
		  , NVL(A.CONF_YN, 'N') AS CONF_YN
		  , B.USS_NM
		  , NVL(A.REFE_YN, 'N') AS REFE_YN
		  , CRTN_EMP_NO
		  , (SELECT B.RECE_YN
	           FROM STD_MAIL_SEND B
	          WHERE 1=1
	            AND B.SEND_PK1 = A.APRV_NO
	            AND B.SEND_PK2 = A.APRV_EMP_NO
	            AND B.SEND_SEQ = (SELECT MAX(C.SEND_SEQ)
	                                FROM STD_MAIL_SEND C
	                               WHERE 1=1 
	                                 AND C.SEND_PK1 = B.SEND_PK1
	                                 AND C.SEND_PK2 = B.SEND_PK2)) AS RECE_YN	/* 수신확인 */
		FROM STD_APRV_LINE A
			LEFT OUTER JOIN STD_USS_MNG B ON B.USS_ID = A.APRV_EMP_NO
		WHERE A.APRV_NO = #{aprv_no}
		ORDER BY DECODE(A.APRV_ORDR, 0, 99, A.APRV_ORDR) ASC
	</select>
	<!-- 결재 승인(완료, 보류, 반려) -->
	<update id="aprvLineUpdate" parameterType="map">
		UPDATE STD_APRV_LINE SET
			APRV_YN_CD = #{aprv_yn_cd}
			, APRV_CONT = #{aprv_cont, jdbcType=VARCHAR}
			, MODI_EMP_NO = #{aprv_emp_no}
			, MODI_DT = SYSDATE
		WHERE APRV_NO = #{aprv_no} AND APRV_EMP_NO = #{aprv_emp_no}
	</update>
	<!-- 결재라인 대기로 변경(반려, 보류에 대한 정보) -->
	<update id="aprvLineUpdateYncd" parameterType="map" >
		UPDATE STD_APRV_LINE SET
			APRV_YN_CD = '0'
		WHERE APRV_NO = #{aprv_no}
			AND APRV_YN_CD = #{aprv_line_cd}
	</update>
	
	<!-- 결재 첨부파일 등록 -->
	<insert id="aprvFileInsert" parameterType="map">
		<selectKey keyProperty="file_no" resultType="String" order="BEFORE">
			SELECT NVL(MAX(TO_NUMBER(FILE_NO)),0)+1
			 FROM STD_APRV_FILE_MNG
		</selectKey>
		INSERT INTO STD_APRV_FILE_MNG ( APRV_NO, FILE_NO, FILE_NM, FILE_STRE_NM, FILE_EXT, FILE_SIZE, CRTN_EMP_NO, CRTN_DT, MODI_EMP_NO, MODI_DT, FILE_PATH)
			VALUES ( #{aprv_no}, #{file_no}, #{file_nm, jdbcType=VARCHAR}, #{file_stre_nm, jdbcType=VARCHAR}, #{file_ext, jdbcType=VARCHAR}
					, #{file_size, jdbcType=VARCHAR}, #{rept_aprv_no, jdbcType=VARCHAR}, SYSDATE, #{rept_aprv_no, jdbcType=VARCHAR}, SYSDATE, #{file_path, jdbcType=VARCHAR})
	</insert>
	<!-- 결재 삭제시 해당 파일정보 삭제 -->
	<delete id="aprvFileDelete" parameterType="map">
		DELETE FROM STD_APRV_FILE_MNG WHERE APRV_NO = #{aprv_no}
	</delete>
	<!-- 단일 파일 삭제 -->
	<delete id="aprvFileOneDelete" parameterType="map">
		DELETE FROM STD_APRV_FILE_MNG WHERE FILE_NO = #{file_no}
	</delete>
	<!-- 결재 첨부파일 정보 조회 -->
	<select id="aprvFileList" resultType="hashMap" parameterType="map">
		SELECT
			APRV_NO
			, FILE_NO
			, FILE_NM
			, FILE_STRE_NM
			, FILE_EXT
			, FILE_SIZE
			, FILE_PATH
		FROM
		  STD_APRV_FILE_MNG
		WHERE APRV_NO = #{aprv_no}
	</select>
	
	
	<!-- 결제중, 반려, 보류인 정보 조회(aprv_yn_cd = 0:결재중, 3:반려, 2:보류 ) -->
	<select id="layerAprvInfo" resultType="hashMap" parameterType="map">
		WITH TB_SKIN AS (
		  SELECT
		    CD, CD_NM
		  FROM STD_CD_MNG
		  WHERE UP_CD = #{aprv_up_cd}
		  ORDER BY CD_ORD ASC
		)
		, TB_DATA AS (
<!-- 
			SELECT
				APRV_TYPE_CD
				,SUM(TYPE_CNT) AS TYPE_CNT
			FROM(
			  SELECT
			    B.APRV_TYPE_CD
			    , 1 AS TYPE_CNT
			  FROM STD_APRV_LINE A
			    , STD_APRV_MNG B
			  WHERE (A.APRV_EMP_NO = #{uss_id} OR B.REPT_APRV_NO = #{uss_id})
			    AND A.APRV_YN_CD = #{aprv_yn_cd}
			    AND A.APRV_NO = B.APRV_NO
			)
			GROUP BY APRV_TYPE_CD
-->
            SELECT 
                APRV_TYPE_CD
                , COUNT(1) AS TYPE_CNT
            FROM (      
                SELECT
                    B.APRV_NO
                    , B.APRV_TYPE_CD
                FROM
                    STD_APRV_MNG B
                    , STD_APRV_LINE A
                WHERE
                    B.REPT_APRV_NO = #{uss_id}
                    AND A.APRV_NO = B.APRV_NO
                    AND A.APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(A.REFE_YN, 'N') = 'N'
                GROUP BY B.APRV_NO, B.APRV_TYPE_CD
                UNION
                SELECT
                    A.APRV_NO
                    , B.APRV_TYPE_CD
                FROM
                    STD_APRV_LINE A
                    , STD_APRV_MNG B
                WHERE
                    A.APRV_EMP_NO = #{uss_id}
                    AND A.APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(A.REFE_YN, 'N') = 'N'
                    AND B.APRV_NO = A.APRV_NO
                GROUP BY A.APRV_NO, B.APRV_TYPE_CD
            ) GROUP BY APRV_TYPE_CD
		)
		SELECT
		  TB_SKIN.CD_NM
		  , TB_SKIN.CD
		  , NVL(TB_DATA.TYPE_CNT, 0) AS TYPE_CNT
		FROM
		  TB_SKIN, TB_DATA
		WHERE TB_SKIN.CD = TB_DATA.APRV_TYPE_CD(+)
	</select>
	<select id="layerAprvInfoCount" resultType="int" parameterType="map">
<!-- 
		SELECT
			COUNT(1) AS TYPE_CNT
		FROM (
			SELECT
			  A.APRV_NO
			FROM STD_APRV_LINE A
			  , STD_APRV_MNG B
			WHERE (A.APRV_EMP_NO = #{uss_id} OR B.REPT_APRV_NO = #{uss_id})
			  AND A.APRV_YN_CD = #{aprv_yn_cd}
			  AND A.APRV_NO = B.APRV_NO
			GROUP BY A.APRV_NO
		)
 -->
        SELECT
            COUNT(1) AS TYPE_CNT
        FROM (
            SELECT
                APRV_NO
            FROM (
                SELECT
                    APRV_NO
                FROM STD_APRV_LINE
                WHERE
                    APRV_EMP_NO = #{uss_id}
                    AND APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(REFE_YN, 'N') != 'Y' 
                UNION
                SELECT
                    A.APRV_NO
                FROM
                    STD_APRV_LINE A
                    , STD_APRV_MNG B
                WHERE
                    B.REPT_APRV_NO = #{uss_id}
                    AND A.APRV_NO = B.APRV_NO
                    AND A.APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(A.REFE_YN, 'N') != 'Y'
                GROUP BY A.APRV_NO
            )
            GROUP BY APRV_NO
        )
	</select>
	
	<!-- 결재자가 결재할 정보를 확인한 경우 -->
	<update id="updateConfYn" parameterType="map">
		UPDATE STD_APRV_LINE SET CONF_YN = 'Y' WHERE APRV_NO = #{aprv_no} AND APRV_EMP_NO = #{aprv_emp_no}
	</update>
	
	<!-- 반려시 이전 결재자들의 데이터 반려로 변경 -->
	<update id="updateCompanion" parameterType="map">
		<![CDATA[
		UPDATE STD_APRV_LINE SET
		  APRV_YN_CD = '3'
		WHERE APRV_NO = #{aprv_no}
		    AND APRV_ORDR < (
		          SELECT 
		              MAX(APRV_ORDR) 
		          FROM STD_APRV_LINE 
		          WHERE APRV_NO = #{aprv_no} 
		              AND APRV_EMP_NO = #{aprv_emp_no}
		    )
		]]>
	</update>
	
	<!-- 결재라인정보 목록조회 -->
	<select id="getAprvLineInfoList" resultType="HashMap" parameterType="map" >
		SELECT A.EMP_NO
			 , A.APRV_ORDR
			 , A.REFE_YN
			 , A.APRV_EMP_NO
			 , B.USS_NM AS APRV_EMP_NM
			 , B.USS_AUTH_CD
			 , C.AUTHOR_NM
			 , B.DP_CD
			 , D.CD_NM
		  FROM STD_APRV_LINE_INFO A, STD_USS_MNG B, STD_AUT_INFO C, STD_CD_MNG D
		 WHERE A.APRV_EMP_NO = B.USS_ID
		   AND B.USS_AUTH_CD = C.AUTHOR_CODE
		   AND B.DP_CD = D.CD
		   AND (EMP_NO = #{EMP_NO, jdbcType=VARCHAR} OR EMP_NO = #{uss_id, jdbcType=VARCHAR})
		 ORDER BY REFE_YN, APRV_ORDR
	</select>
	
	<insert id="insertBizplayData" parameterType="map">
		MERGE INTO BP_0411A
		USING DUAL
		   ON ( CARD_NO = #{CARD_NO}
		     AND SEQ = #{SEQ}
		     AND APV_DT = #{APV_DT})
		WHEN MATCHED THEN
			UPDATE SET
			BIZ_NO = #{BIZ_NO, jdbcType=VARCHAR},
			BANK_CD = #{BANK_CD, jdbcType=VARCHAR},
			CARD_TYPE = #{CARD_TYPE, jdbcType=VARCHAR},
			CARD_B_TYPE = #{CARD_B_TYPE, jdbcType=VARCHAR},
			APV_NO = #{APV_NO, jdbcType=VARCHAR},
			APV_TM = #{APV_TM, jdbcType=VARCHAR},
			APV_CAN_YN = #{APV_CAN_YN, jdbcType=VARCHAR},
			APV_CAN_DT = #{APV_CAN_DT, jdbcType=VARCHAR},
			SETL_SCHE_DT = #{SETL_SCHE_DT, jdbcType=VARCHAR},
			APR_AMT = #{APR_AMT, jdbcType=NUMERIC},
			APR_SPLY_AMT = #{APR_SPLY_AMT, jdbcType=NUMERIC},
			APR_VAT_AMT = #{APR_VAT_AMT, jdbcType=NUMERIC},
			BUY_SUM = #{BUY_SUM, jdbcType=NUMERIC},
			SPLY_AMT = #{SPLY_AMT, jdbcType=NUMERIC},
			VAT_AMT = #{VAT_AMT, jdbcType=NUMERIC},
			SRV_FEE = #{SRV_FEE, jdbcType=NUMERIC},
			COMM = #{COMM, jdbcType=NUMERIC},
			OVRS_USE_YN = #{OVRS_USE_YN, jdbcType=VARCHAR},
			CURR_CD = #{CURR_CD, jdbcType=VARCHAR},
			CURR_AMT = #{CURR_AMT, jdbcType=NUMERIC},
			ORG_SPLY_AMT = #{ORG_SPLY_AMT, jdbcType=NUMERIC},
			ORG_VAT = #{ORG_VAT, jdbcType=NUMERIC},
			ITLM_MMS_CNT = #{ITLM_MMS_CNT, jdbcType=VARCHAR},
			MEST_NM = #{MEST_NM, jdbcType=VARCHAR},
			MEST_NO = #{MEST_NO, jdbcType=VARCHAR},
			MEST_TAXT_TYP_INFO = #{MEST_TAXT_TYP_INFO, jdbcType=VARCHAR},
			MEST_BIZ_NO = #{MEST_BIZ_NO, jdbcType=VARCHAR},
			MEST_REPR_NM = #{MEST_REPR_NM, jdbcType=VARCHAR},
			MEST_TEL_NO = #{MEST_TEL_NO, jdbcType=VARCHAR},
			MEST_ZIP_CD = #{MEST_ZIP_CD, jdbcType=VARCHAR},
			MEST_ADDR_1 = #{MEST_ADDR_1, jdbcType=VARCHAR},
			MEST_ADDR_2 = #{MEST_ADDR_2, jdbcType=VARCHAR},
			CARD_TPBZ_CD = #{CARD_TPBZ_CD, jdbcType=VARCHAR},
			CARD_TPBZ_NM = #{CARD_TPBZ_NM, jdbcType=VARCHAR},
			REG_GB = #{REG_GB, jdbcType=VARCHAR},
			BUY_YN = #{BUY_YN, jdbcType=VARCHAR},
			PURCH_DATE = #{PURCH_DATE, jdbcType=VARCHAR},
			ACQU_EXCH = #{ACQU_EXCH, jdbcType=VARCHAR},
			COLL_NO = #{COLL_NO, jdbcType=VARCHAR},
			VAT_RFND_STS = #{VAT_RFND_STS, jdbcType=VARCHAR},
			PROC_STS = #{PROC_STS, jdbcType=VARCHAR},
			TRAN_KIND_CD = #{TRAN_KIND_CD, jdbcType=VARCHAR},
			TRAN_KIND_NM = #{TRAN_KIND_NM, jdbcType=VARCHAR},
			TRAN_KIND_ERP_CO_CD = #{TRAN_KIND_ERP_CO_CD, jdbcType=VARCHAR},
			BIZ_UNIT_NM = #{BIZ_UNIT_NM, jdbcType=VARCHAR},
			BIZ_UNIT_ERP_CD = #{BIZ_UNIT_ERP_CD, jdbcType=VARCHAR},
			SUMMARY = #{SUMMARY, jdbcType=VARCHAR},
			USER_NM = #{USER_NM, jdbcType=VARCHAR},
			USER_ID = #{USER_ID, jdbcType=VARCHAR},
			USER_EMP_CD = #{USER_EMP_CD, jdbcType=VARCHAR},
			USER_EMP_OFFICE = #{USER_EMP_OFFICE, jdbcType=VARCHAR},
			DEPT_NM = #{DEPT_NM, jdbcType=VARCHAR},
			DEPT_CD = #{DEPT_CD, jdbcType=VARCHAR},
			DEPT_ERP_CD = #{DEPT_ERP_CD, jdbcType=VARCHAR},
			R_USER_NM = #{R_USER_NM, jdbcType=VARCHAR},
			R_USER_ID = #{R_USER_ID, jdbcType=VARCHAR},
			R_EMP_ERP_CD = #{R_EMP_ERP_CD, jdbcType=VARCHAR},
			R_USER_EMP_OFFICE = #{R_USER_EMP_OFFICE, jdbcType=VARCHAR},
			R_DEPT_NM = #{R_DEPT_NM, jdbcType=VARCHAR},
			R_DEPT_ERP_CD = #{R_DEPT_ERP_CD, jdbcType=VARCHAR},
			LST_USER_ID = #{LST_USER_ID, jdbcType=VARCHAR},
			LST_USER_EMP_CD = #{LST_USER_EMP_CD, jdbcType=VARCHAR},
			LST_USER_DEPT_ERP_CD = #{LST_USER_DEPT_ERP_CD, jdbcType=VARCHAR},
			LST_MOD_DT = #{LST_MOD_DT, jdbcType=VARCHAR},
			ERP_CODE = #{ERP_CODE, jdbcType=VARCHAR},
			APPR_STS = #{APPR_STS, jdbcType=VARCHAR},
			APPR_SUBJ = #{APPR_SUBJ, jdbcType=VARCHAR},
			APPR_CONT = #{APPR_CONT, jdbcType=VARCHAR},
			ERP_ASST_CD = #{ERP_ASST_CD, jdbcType=VARCHAR},
			ATT_IMG_YN = #{ATT_IMG_YN, jdbcType=VARCHAR},
			ATT_IMG_CNT = #{ATT_IMG_CNT, jdbcType=VARCHAR},
			SUMMARY_2 = #{SUMMARY_2, jdbcType=VARCHAR},
			SUMMARY_3 = #{SUMMARY_3, jdbcType=VARCHAR},
			SUMMARY_4 = #{SUMMARY_4, jdbcType=VARCHAR},
			SUMMARY_5 = #{SUMMARY_5, jdbcType=VARCHAR},
			SUMMARY_6 = #{SUMMARY_6, jdbcType=VARCHAR},
			PPP_APPR_VOUCH_YN = #{PPP_APPR_VOUCH_YN, jdbcType=VARCHAR},
			PPP_APPR_SEQ_NO = #{PPP_APPR_SEQ_NO, jdbcType=VARCHAR},
			RESERVE_01_NM = #{RESERVE_01_NM, jdbcType=VARCHAR},
			RESERVE_01_CODE = #{RESERVE_01_CODE, jdbcType=VARCHAR},
			RESERVE_01_ERP_CD = #{RESERVE_01_ERP_CD, jdbcType=VARCHAR},
			EVENT_DATETIME = #{EVENT_DATETIME, jdbcType=VARCHAR},
			START_DTM = #{START_DTM, jdbcType=VARCHAR},
			END_DTM = #{END_DTM, jdbcType=VARCHAR},
			EVENT_DTM = #{EVENT_DTM, jdbcType=VARCHAR},
			ASSET_DIV_NM = #{ASSET_DIV_NM, jdbcType=VARCHAR},
			ASSET_DEPT_NM = #{ASSET_DEPT_NM, jdbcType=VARCHAR},
			ASSET_DIV_ERP_CD = #{ASSET_DIV_ERP_CD, jdbcType=VARCHAR},
			ASSET_DEPT_ERP_CD = #{ASSET_DEPT_ERP_CD, jdbcType=VARCHAR},
			DEDCT_YN = #{DEDCT_YN, jdbcType=VARCHAR},
			BIZ_UNIT_NM2 = #{BIZ_UNIT_NM2, jdbcType=VARCHAR},
			BIZ_UNIT_ERP_CD2 = #{BIZ_UNIT_ERP_CD2, jdbcType=VARCHAR},
			PAY_ACCOUNT_NO = #{PAY_ACCOUNT_NO, jdbcType=VARCHAR},
			PAY_HOLDER_NAME = #{PAY_HOLDER_NAME, jdbcType=VARCHAR},
			PAY_BANK = #{PAY_BANK, jdbcType=VARCHAR},
			EXPN_PAY_DT = #{EXPN_PAY_DT, jdbcType=VARCHAR},
			EXPN_PRE_DT = #{EXPN_PRE_DT, jdbcType=VARCHAR},
			DOC_NO = #{DOC_NO, jdbcType=VARCHAR},
			SUMMARY_7 = #{SUMMARY_7, jdbcType=VARCHAR},
			SUMMARY_8 = #{SUMMARY_8, jdbcType=VARCHAR},
			RSCH_CD = #{RSCH_CD, jdbcType=VARCHAR},
			RSCH_NM = #{RSCH_NM, jdbcType=VARCHAR},
			ADVC_CD = #{ADVC_CD, jdbcType=VARCHAR},
			ADVC_NM = #{ADVC_NM, jdbcType=VARCHAR},
			CARD_ERP_CD = #{CARD_ERP_CD, jdbcType=VARCHAR},
			CARD_NICK_NM = #{CARD_NICK_NM, jdbcType=VARCHAR},
			DRAFT_DATE = #{DRAFT_DATE, jdbcType=VARCHAR},
			PTL_ID = #{PTL_ID, jdbcType=VARCHAR},
			USE_INTT_ID = #{USE_INTT_ID, jdbcType=VARCHAR},
			LST_APRV_DATE = #{LST_APRV_DATE, jdbcType=VARCHAR},
			APPR_SEQ_NO = #{APPR_SEQ_NO, jdbcType=VARCHAR},
			RESOLLIST_SEQ_NO = #{RESOLLIST_SEQ_NO, jdbcType=VARCHAR},
			PROC_BANK_ACCT_NO = #{PROC_BANK_ACCT_NO, jdbcType=VARCHAR},
			PROC_HOLDER_NAME = #{PROC_HOLDER_NAME, jdbcType=VARCHAR},
			PROC_BANK_NM = #{PROC_BANK_NM, jdbcType=VARCHAR},
			CAN_MG = #{CAN_MG, jdbcType=VARCHAR},
			ERP_STAT_NO = #{ERP_STAT_NO, jdbcType=VARCHAR},
			CAR_INFO = #{CAR_INFO, jdbcType=VARCHAR}
		WHEN NOT MATCHED THEN
			INSERT VALUES ( 
			#{BIZ_NO, jdbcType=VARCHAR},
			#{BANK_CD, jdbcType=VARCHAR},
			#{CARD_TYPE, jdbcType=VARCHAR},
			#{CARD_NO, jdbcType=VARCHAR},
			#{CARD_B_TYPE, jdbcType=VARCHAR},
			#{SEQ, jdbcType=VARCHAR},
			#{APV_DT, jdbcType=VARCHAR},
			#{APV_NO, jdbcType=VARCHAR},
			#{APV_TM, jdbcType=VARCHAR},
			#{APV_CAN_YN, jdbcType=VARCHAR},
			#{APV_CAN_DT, jdbcType=VARCHAR},
			#{SETL_SCHE_DT, jdbcType=VARCHAR},
			#{APR_AMT, jdbcType=NUMERIC},
			#{APR_SPLY_AMT, jdbcType=NUMERIC},
			#{APR_VAT_AMT, jdbcType=NUMERIC},
			#{BUY_SUM, jdbcType=NUMERIC},
			#{SPLY_AMT, jdbcType=NUMERIC},
			#{VAT_AMT, jdbcType=NUMERIC},
			#{SRV_FEE, jdbcType=NUMERIC},
			#{COMM, jdbcType=NUMERIC},
			#{OVRS_USE_YN, jdbcType=VARCHAR},
			#{CURR_CD, jdbcType=VARCHAR},
			#{CURR_AMT, jdbcType=NUMERIC},
			#{ORG_SPLY_AMT, jdbcType=NUMERIC},
			#{ORG_VAT, jdbcType=NUMERIC},
			#{ITLM_MMS_CNT, jdbcType=VARCHAR},
			#{MEST_NM, jdbcType=VARCHAR},
			#{MEST_NO, jdbcType=VARCHAR},
			#{MEST_TAXT_TYP_INFO, jdbcType=VARCHAR},
			#{MEST_BIZ_NO, jdbcType=VARCHAR},
			#{MEST_REPR_NM, jdbcType=VARCHAR},
			#{MEST_TEL_NO, jdbcType=VARCHAR},
			#{MEST_ZIP_CD, jdbcType=VARCHAR},
			#{MEST_ADDR_1, jdbcType=VARCHAR},
			#{MEST_ADDR_2, jdbcType=VARCHAR},
			#{CARD_TPBZ_CD, jdbcType=VARCHAR},
			#{CARD_TPBZ_NM, jdbcType=VARCHAR},
			#{REG_GB, jdbcType=VARCHAR},
			#{BUY_YN, jdbcType=VARCHAR},
			#{PURCH_DATE, jdbcType=VARCHAR},
			#{ACQU_EXCH, jdbcType=VARCHAR},
			#{COLL_NO, jdbcType=VARCHAR},
			#{VAT_RFND_STS, jdbcType=VARCHAR},
			#{PROC_STS, jdbcType=VARCHAR},
			#{TRAN_KIND_CD, jdbcType=VARCHAR},
			#{TRAN_KIND_NM, jdbcType=VARCHAR},
			#{TRAN_KIND_ERP_CO_CD, jdbcType=VARCHAR},
			#{BIZ_UNIT_NM, jdbcType=VARCHAR},
			#{BIZ_UNIT_ERP_CD, jdbcType=VARCHAR},
			#{SUMMARY, jdbcType=VARCHAR},
			#{USER_NM, jdbcType=VARCHAR},
			#{USER_ID, jdbcType=VARCHAR},
			#{USER_EMP_CD, jdbcType=VARCHAR},
			#{USER_EMP_OFFICE, jdbcType=VARCHAR},
			#{DEPT_NM, jdbcType=VARCHAR},
			#{DEPT_CD, jdbcType=VARCHAR},
			#{DEPT_ERP_CD, jdbcType=VARCHAR},
			#{R_USER_NM, jdbcType=VARCHAR},
			#{R_USER_ID, jdbcType=VARCHAR},
			#{R_EMP_ERP_CD, jdbcType=VARCHAR},
			#{R_USER_EMP_OFFICE, jdbcType=VARCHAR},
			#{R_DEPT_NM, jdbcType=VARCHAR},
			#{R_DEPT_ERP_CD, jdbcType=VARCHAR},
			#{LST_USER_ID, jdbcType=VARCHAR},
			#{LST_USER_EMP_CD, jdbcType=VARCHAR},
			#{LST_USER_DEPT_ERP_CD, jdbcType=VARCHAR},
			#{LST_MOD_DT, jdbcType=VARCHAR},
			#{ERP_CODE, jdbcType=VARCHAR},
			#{APPR_STS, jdbcType=VARCHAR},
			#{APPR_SUBJ, jdbcType=VARCHAR},
			#{APPR_CONT, jdbcType=VARCHAR},
			#{ERP_ASST_CD, jdbcType=VARCHAR},
			#{ATT_IMG_YN, jdbcType=VARCHAR},
			#{ATT_IMG_CNT, jdbcType=VARCHAR},
			#{SUMMARY_2, jdbcType=VARCHAR},
			#{SUMMARY_3, jdbcType=VARCHAR},
			#{SUMMARY_4, jdbcType=VARCHAR},
			#{SUMMARY_5, jdbcType=VARCHAR},
			#{SUMMARY_6, jdbcType=VARCHAR},
			#{PPP_APPR_VOUCH_YN, jdbcType=VARCHAR},
			#{PPP_APPR_SEQ_NO, jdbcType=VARCHAR},
			#{RESERVE_01_NM, jdbcType=VARCHAR},
			#{RESERVE_01_CODE, jdbcType=VARCHAR},
			#{RESERVE_01_ERP_CD, jdbcType=VARCHAR},
			#{EVENT_DATETIME, jdbcType=VARCHAR},
			#{START_DTM, jdbcType=VARCHAR},
			#{END_DTM, jdbcType=VARCHAR},
			#{EVENT_DTM, jdbcType=VARCHAR},
			#{ASSET_DIV_NM, jdbcType=VARCHAR},
			#{ASSET_DEPT_NM, jdbcType=VARCHAR},
			#{ASSET_DIV_ERP_CD, jdbcType=VARCHAR},
			#{ASSET_DEPT_ERP_CD, jdbcType=VARCHAR},
			#{DEDCT_YN, jdbcType=VARCHAR},
			#{BIZ_UNIT_NM2, jdbcType=VARCHAR},
			#{BIZ_UNIT_ERP_CD2, jdbcType=VARCHAR},
			#{PAY_ACCOUNT_NO, jdbcType=VARCHAR},
			#{PAY_HOLDER_NAME, jdbcType=VARCHAR},
			#{PAY_BANK, jdbcType=VARCHAR},
			#{EXPN_PAY_DT, jdbcType=VARCHAR},
			#{EXPN_PRE_DT, jdbcType=VARCHAR},
			#{DOC_NO, jdbcType=VARCHAR},
			#{SUMMARY_7, jdbcType=VARCHAR},
			#{SUMMARY_8, jdbcType=VARCHAR},
			#{RSCH_CD, jdbcType=VARCHAR},
			#{RSCH_NM, jdbcType=VARCHAR},
			#{ADVC_CD, jdbcType=VARCHAR},
			#{ADVC_NM, jdbcType=VARCHAR},
			#{CARD_ERP_CD, jdbcType=VARCHAR},
			#{CARD_NICK_NM, jdbcType=VARCHAR},
			#{DRAFT_DATE, jdbcType=VARCHAR},
			#{PTL_ID, jdbcType=VARCHAR},
			#{USE_INTT_ID, jdbcType=VARCHAR},
			#{LST_APRV_DATE, jdbcType=VARCHAR},
			#{APPR_SEQ_NO, jdbcType=VARCHAR},
			#{RESOLLIST_SEQ_NO, jdbcType=VARCHAR},
			#{PROC_BANK_ACCT_NO, jdbcType=VARCHAR},
			#{PROC_HOLDER_NAME, jdbcType=VARCHAR},
			#{PROC_BANK_NM, jdbcType=VARCHAR},
			#{CAN_MG, jdbcType=VARCHAR},
			#{ERP_STAT_NO, jdbcType=VARCHAR},
			#{CAR_INFO, jdbcType=VARCHAR}
		)
	</insert>
	
	<insert id="insertBizplayFile" parameterType="map">
		INSERT INTO BP_0411A_FILE (
			CARD_NO
			, SEQ
			, APV_DT
			, IMG_SEQ_NO
			, REG_DTM
			, RCPT_IMG_URL
			, ORG_IMG_URL
			, IMG_NM
		) VALUES (
			#{CARD_NO, jdbcType=VARCHAR}
			, #{SEQ, jdbcType=VARCHAR}
			, #{APV_DT, jdbcType=VARCHAR}
			, #{IMG_SEQ_NO, jdbcType=VARCHAR}
			, #{REG_DTM, jdbcType=VARCHAR}
			, #{RCPT_IMG_URL, jdbcType=VARCHAR}
			, #{ORG_IMG_URL, jdbcType=VARCHAR}
			, #{IMG_NM, jdbcType=VARCHAR}
		)
	</insert>
	
	<delete id="deleteBizplayFile" parameterType="map">
		DELETE BP_0411A_FILE
		 WHERE CARD_NO = #{CARD_NO, jdbcType=VARCHAR}
		   AND SEQ = #{SEQ, jdbcType=VARCHAR}
		   AND APV_DT = #{APV_DT, jdbcType=VARCHAR} 
	</delete>
	
	<insert id="insertBizplayLine" parameterType="map">
		INSERT INTO BP_0411A_LINE (
			PPP_APPR_SEQ_NO
			, APPV_SEQ_NO
			, APRV_LINE_NM
			, APPR_KIND
			, APRV_DATE
			, APRV_EMP_CD
			, APRV_USER_GB
			, APRV_USER_DEPT_NM
		)
		SELECT 
			#{PPP_APPR_SEQ_NO, jdbcType=VARCHAR}
			, #{APPV_SEQ_NO, jdbcType=VARCHAR}
			, #{APRV_LINE_NM, jdbcType=VARCHAR}
			, #{APPR_KIND, jdbcType=VARCHAR}
			, #{APRV_DATE, jdbcType=VARCHAR}
			, #{APRV_EMP_CD, jdbcType=VARCHAR}
			, #{APRV_USER_GB, jdbcType=VARCHAR}
			, #{APRV_USER_DEPT_NM, jdbcType=VARCHAR}
		FROM DUAL
		WHERE NOT EXISTS (
			SELECT PPP_APPR_SEQ_NO
			FROM BP_0411A_LINE
			WHERE PPP_APPR_SEQ_NO = #{PPP_APPR_SEQ_NO, jdbcType=VARCHAR}
			  AND APPR_KIND = #{APPR_KIND, jdbcType=VARCHAR}
			  AND APRV_EMP_CD = #{APRV_EMP_CD, jdbcType=VARCHAR}
		)
	</insert>
	
	<select id="getBizplayLine" resultType="HashMap" parameterType="String">
		SELECT 
			PPP_APPR_SEQ_NO
			, APRV_EMP_CD
			, APPR_KIND
			, APPV_SEQ_NO
			, APRV_LINE_NM
			, APRV_DATE
			, APRV_USER_GB
			, APRV_USER_DEPT_NM
		FROM BP_0411A_LINE
		WHERE PPP_APPR_SEQ_NO = #{pppApprSeqNo,  jdbcType=VARCHAR}
		ORDER BY APPV_SEQ_NO
	</select>
	
	<!-- 결재정보 등록 -->
	<insert id="insertBizplayAprv" parameterType="map">
		<selectKey keyProperty="APRV_NO" resultType="String" order="BEFORE">
			SELECT NVL(MAX(TO_NUMBER(APRV_NO)),0)+1
			 FROM STD_APRV_MNG
		</selectKey>
		INSERT INTO STD_APRV_MNG ( 
			APRV_NO
		  , REPT_APRV_NO
		  , APRV_TYPE_CD
		  , APRV_TYPE_DTIL_CD
		  , TITLE
		  , PROJ_CD
		  , TERM_ST_YM
		  , TERM_ED_YM
		  , REPT_CONT
		  , HALF_TYPE_CD
		  , PLACE
		  , CRTN_EMP_NO
		  , CRTN_DT
		  , MODI_EMP_NO
		  , MODI_DT
		  , PPP_APPR_SEQ_NO
		  , REPT_DP_CD
		  , REPT_AUTH_CD
		) 
		VALUES (
			#{APRV_NO}
		  , #{REPT_APRV_NO, jdbcType=VARCHAR}
		  , #{APRV_TYPE_CD, jdbcType=VARCHAR}
		  , #{APRV_TYPE_DTIL_CD, jdbcType=VARCHAR}
		  , #{TITLE, jdbcType=VARCHAR}
		  , #{PROJ_CD, jdbcType=VARCHAR}
		  , #{TERM_ST_YM, jdbcType=VARCHAR}
		  , #{TERM_ED_YM, jdbcType=VARCHAR}
		  , #{REPT_CONT, jdbcType=VARCHAR}
		  , #{HALF_TYPE_CD, jdbcType=VARCHAR}
		  , #{PLACE, jdbcType=VARCHAR}
		  , #{REPT_APRV_NO, jdbcType=VARCHAR}
		  , TO_DATE(#{DRAFT_DATE},'YYYYMMDDHH24MISS')
		  , #{REPT_APRV_NO, jdbcType=VARCHAR}
		  , TO_DATE(#{DRAFT_DATE},'YYYYMMDDHH24MISS')
		  , #{PPP_APPR_SEQ_NO, jdbcType=VARCHAR}
		  , #{LST_USER_DEPT_ERP_CD, jdbcType=VARCHAR}
		  , (SELECT USS_AUTH_CD FROM STD_USS_MNG WHERE USS_ID = #{REPT_APRV_NO, jdbcType=VARCHAR})
		)
	</insert>
	
	<insert id="insertBizplayAprvLine" parameterType="map">
		<selectKey keyProperty="APRV_NO" resultType="String" order="BEFORE">
			SELECT APRV_NO
			 FROM STD_APRV_MNG
			 WHERE PPP_APPR_SEQ_NO = #{PPP_APPR_SEQ_NO}
		</selectKey>
		INSERT INTO STD_APRV_LINE(
				APRV_NO
			  , APRV_EMP_NO
			  , APRV_ORDR
			  , APRV_YM
			  , APRV_YN_CD
			  , APRV_CONT
			  , CRTN_EMP_NO
			  , CRTN_DT
			  , MODI_EMP_NO
			  , MODI_DT
			  , CONF_YN
			  , REFE_YN
			  , APRV_EMP_AUTH_CD
			) VALUES
			(
				#{APRV_NO, jdbcType=VARCHAR}
			  , #{APRV_EMP_CD, jdbcType=VARCHAR}
			  , #{APRV_ORDR, jdbcType=VARCHAR}
			  , #{APRV_YM, jdbcType=VARCHAR}
			  , #{APRV_YN_CD, jdbcType=VARCHAR}
			  , #{APRV_CONT, jdbcType=VARCHAR}
			  , #{CRTN_EMP_NO, jdbcType=VARCHAR}
			  , TO_DATE(#{CRTN_DT},'YYYYMMDDHH24MISS')
			  , #{APRV_EMP_CD, jdbcType=VARCHAR}
			  , TO_DATE(#{MODI_DT},'YYYYMMDDHH24MISS')
			  , #{CONF_YN, jdbcType=VARCHAR}
			  , #{REFE_YN, jdbcType=VARCHAR}
			  , (SELECT USS_AUTH_CD FROM STD_USS_MNG WHERE USS_ID = #{APRV_EMP_CD, jdbcType=VARCHAR})
			)
	</insert>
	
	<select id="getBizplayData" resultType="HashMap" parameterType="map">
		SELECT 'XXXX-' || SUBSTR(CARD_NO, 5, 4) || '-' || SUBSTR(CARD_NO, 9, 4) || '-' || SUBSTR(CARD_NO, 13, 4) CARD_NO_MASKING
			, B.BP_CD_NM BANK_NM
			, A.*
			, TO_CHAR(TO_TIMESTAMP(A.APV_TM, 'hh24:mi:ss'),'hh24:mi')  AS APV_TM_FORMAT
			, TO_CHAR(TO_DATE(A.DRAFT_DATE, 'yymmdd'), 'yyyy-mm-dd') AS DRAFT_DATE_FORMAT
            , TO_CHAR(TO_DATE(A.APV_DT, 'yyyymmdd'), 'yyyy.mm.dd') AS APV_DT_FORMAT
		  FROM BP_0411A A
			, BP_CD B
		 WHERE PPP_APPR_SEQ_NO = (SELECT PPP_APPR_SEQ_NO
								    FROM STD_APRV_MNG
								   WHERE APRV_NO = #{aprv_no, jdbcType=VARCHAR})
		   AND A.BANK_CD = B.BP_CD
	</select>
	
	<select id="getBizplayAprvData" resultType="HashMap">
		SELECT A.* 
		  FROM BP_0411A A
		 WHERE APPR_STS = '9'
		   AND NOT EXISTS (SELECT PPP_APPR_SEQ_NO
							 FROM STD_APRV_MNG B
							WHERE A.PPP_APPR_SEQ_NO = B.PPP_APPR_SEQ_NO)
	</select>
	
	<select id="getBizplayFile" resultType="HashMap" parameterType="map">
		SELECT CARD_NO, SEQ, APV_DT, IMG_SEQ_NO, REG_DTM, RCPT_IMG_URL, ORG_IMG_URL, IMG_NM
		  FROM BP_0411A_FILE
		 WHERE CARD_NO = #{CARD_NO, jdbcType=VARCHAR}
		   AND SEQ = #{SEQ, jdbcType=VARCHAR}
		   AND APV_DT = #{APV_DT, jdbcType=VARCHAR}
	</select>
	
	<select id="getTrcsList" resultType="HashMap">
		SELECT REGN_CD1
			 , REGN_CD2
			 , DSTNC
			 , TRCS
		  FROM STD_TRCS
	</select>
	
	<select id="getTrvctInfo" resultType="HashMap" parameterType="map">
		SELECT A.AUTHOR_NM /* 직위 */
		     , C.CD_NM     /* 급수 */
		     , D.TRVCT     /* 여비 */
		  FROM STD_AUT_INFO A, STD_TRVCT_GROUP_AUT B, STD_CD_MNG C, STD_TRVCT_GROUP D
		 WHERE A.AUTHOR_CODE = #{auth_cd}
		   AND A.AUTHOR_CODE = B.AUTHOR_CODE
		   AND B.GROUP_CD = C.CD
		   AND D.GROUP_CD = C.CD
	</select>
	
</mapper>
