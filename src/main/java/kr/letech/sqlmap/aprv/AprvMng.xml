<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="aprvMng">	
	<!-- 결재정보 목록조회 -->
	<select id="getAprvList" resultType="HashMap" parameterType="map" >
		WITH VW_APRV_LINE AS (
			/* 진행 상태 정보 가져오기 */
		  SELECT
		    APRV_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '대기'
		        WHEN TOT_CNT = APRV_YN_1 THEN '완료'
		        WHEN APRV_YN_2 > 0 THEN '보류'
		        WHEN APRV_YN_3 > 0 THEN '반려'
		        ELSE '진행중'
		      END APRV_YN_NM
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '0'
		        WHEN TOT_CNT = APRV_YN_1 THEN '1'
		        WHEN APRV_YN_2 > 0 THEN '2'
		        WHEN APRV_YN_3 > 0 THEN '3'
		        ELSE '9'
		      END APRV_YN_TP
			, APRV_YN_1 AS APRV_YN_END_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '1'
		        WHEN TOT_CNT = APRV_YN_1 THEN '0'
		        WHEN APRV_YN_2 > 0 THEN '1'
		        WHEN APRV_YN_3 > 0 THEN '1'
		        ELSE '1'
		      END SORT_ORDR
		  FROM (
		    SELECT 
		      A.APRV_NO
		      , SUM(TOT_CNT) As TOT_CNT
		      , SUM(APRV_YN_0) AS APRV_YN_0		/* 대기 */
		      , SUM(APRV_YN_1) AS APRV_YN_1		/* 완료 */
		      , SUM(APRV_YN_2) AS APRV_YN_2		/* 보류 */
		      , SUM(APRV_YN_3) AS APRV_YN_3		/* 반려 */
		    FROM (
              SELECT 
                APRV_NO
                , COUNT(1) AS TOT_CNT
                , CASE
                    WHEN APRV_YN_CD = 0 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_0        /* 대기 */
                , CASE
                    WHEN APRV_YN_CD = 1 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_1        /* 완료 */
                , CASE
                    WHEN APRV_YN_CD = 2 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_2        /* 보류 */
                , CASE
                    WHEN APRV_YN_CD = 3 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_3        /* 반려 */
              FROM STD_APRV_LINE 
              WHERE NVL(REFE_YN, 'N') = 'N'
              GROUP BY APRV_NO, APRV_YN_CD ,NVL(REFE_YN, 'N')
		    ) A
		    GROUP BY A.APRV_NO
		  )
		)
		, VW_STD_LINE AS (
		  SELECT
		    APRV_NO, APRV_YN_CD, APRV_ORDR, CONF_YN, REFE_YN
		  FROM STD_APRV_LINE
		  WHERE APRV_EMP_NO = #{uss_id}
		)
		, VW_STD_CONF AS (
			SELECT C.APRV_NO, C.CONF_YN
	          FROM STD_APRV_LINE C
	         WHERE (C.APRV_NO || '_' || C.APRV_ORDR) IN (  SELECT    B.APRV_NO
	                                                              || '_'
	                                                              || MAX (B.APRV_ORDR)
	                                                         FROM STD_APRV_MNG A,
	                                                              STD_APRV_LINE B
	                                                        WHERE     A.REPT_APRV_NO =
	                                                                     #{uss_id}
	                                                              AND A.APRV_NO = B.APRV_NO
	                                                     GROUP BY B.APRV_NO)
	        UNION
			SELECT B.APRV_NO, B.CONF_YN
				FROM STD_APRV_LINE B
			WHERE B.APRV_EMP_NO = #{uss_id}
		)
		, VW_STD_CONF_Y AS (
		    SELECT
		      C.APRV_NO
		      , SUM(C.CONF_Y_CNT) AS CONF_Y_CNT
              , SUM(C.CONF_Y_CNT) AS CONF_REFE_CNT
		    FROM (
		          SELECT 
		            B.APRV_NO
		            , CASE
		                WHEN B.CONF_YN = 'Y' THEN COUNT(1)
		                ELSE 0
		             END CONF_Y_CNT
                    , CASE
                        WHEN B.CONF_YN = 'Y' AND NVL(B.REFE_YN, 'N') = 'Y' THEN COUNT(1)
                        ELSE 0
                     END CONF_REFE_CONT
		          FROM STD_APRV_MNG A
		              , STD_APRV_LINE B
		          WHERE (A.REPT_APRV_NO = #{uss_id} OR B.APRV_EMP_NO = #{uss_id})
		            AND A.APRV_NO = B.APRV_NO
		          GROUP BY B.APRV_NO, B.CONF_YN, NVL(B.REFE_YN, 'N')
		        ) C
		    GROUP BY C.APRV_NO
		)
		SELECT A.APRV_NO					/* 결재번호 */
		     , A.REPT_APRV_NO			/* 보고자사원번호(임시로 회원ID사용) */
		     , B.USS_NM AS REPT_APRV_NM
		     , A.TITLE							/* 제목 */
		     , A.PROJ_CD						/* 프로젝트코드 */
		     , A.TERM_ST_YM				/* 기간시작일자 */
		     , A.TERM_ED_YM				/* 기간종료일자 */
<!-- 		     , A.REPT_CONT					/* 보고내용 */ -->
<!-- 		     , A.HALF_TYPE_CD				/* 반차구분코드 */ -->
<!-- 		     , A.PLACE							/* 행선지 */ -->
		     , C.CD_NM AS APRV_TYPE_NM
		     , NVL(E.APRV_YN_NM, '대기') AS APRV_YN_NM
		     , TO_CHAR(A.CRTN_DT, 'YYYY-MM-DD') AS CRTN_DT
		     , DECODE(F.APRV_NO, null, 'N', 'Y') AS LINE_CHK
		     , F.APRV_YN_CD AS LINE_APRV_YN_CD
		     , E.APRV_YN_END_NO
		     , F.APRV_ORDR
		     , E.APRV_YN_TP
			 , CASE 
			     WHEN F.CONF_YN IS NULL THEN G.CONF_YN
			     ELSE F.CONF_YN
			  END CONF_YN
			 , H.CONF_Y_CNT
			 , NVL(F.REFE_YN, 'N') AS REFE_YN
			 , H.CONF_REFE_CNT
			 
			 , (SELECT AB.APRV_EMP_NO
		          FROM STD_APRV_MNG AA
		             , STD_APRV_LINE AB
		         WHERE 1=1
		           AND AA.APRV_NO = A.APRV_NO
		           AND AA.APRV_NO = AB.APRV_NO
		           AND AB.APRV_ORDR = (SELECT MIN(AAA.APRV_ORDR)
		                                FROM STD_APRV_LINE AAA
		                               WHERE AAA.APRV_YN_CD IN 0
		                                 AND AAA.APRV_ORDR NOT IN 0
		                                 AND AAA.APRV_NO = AA.APRV_NO
		                               GROUP BY AAA.APRV_NO)) AS APRV_ID	/* 현재 결재할 사람의 ID */
             , A.CAL_NO		/* 캘린더 번호*/
			 
		 FROM STD_APRV_MNG A
		    LEFT OUTER JOIN STD_USS_MNG B ON B.USS_ID = A.REPT_APRV_NO
		    LEFT OUTER JOIN STD_CD_MNG C ON C.UP_CD = 'CD0001' AND C.CD = A.APRV_TYPE_CD
		    LEFT OUTER JOIN VW_APRV_LINE E ON E.APRV_NO = A.APRV_NO
		    LEFT OUTER JOIN VW_STD_LINE F ON F.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_STD_CONF G ON G.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_STD_CONF_Y H ON H.APRV_NO = A.APRV_NO
		WHERE 1=1
		<if test='uss_auth_cd != "ROLE_ADMIN"'>
			AND ( A.REPT_APRV_NO = #{uss_id}
					OR A.APRV_NO IN (SELECT APRV_NO FROM STD_APRV_LINE WHERE APRV_EMP_NO = #{uss_id}) )		/* 만약 결재자 일경우에 결재가 완료된 정보를 안보여줄경우  */
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField)" >
			<choose>
				<when test='searchGubun == "01"' >
			AND A.TITLE LIKE '%' || #{searchField} || '%'
				</when>
				<when test='searchGubun == "02"' >
			AND REPT_CONT LIKE '%' || #{searchField} || '%'	
				</when>
			</choose>
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList1)" >	<!-- 결재구분 -->
			AND A.APRV_TYPE_CD = UPPER(#{searchCdList1})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList2)" >	<!-- 확인유무 -->
			AND (F.CONF_YN = #{searchCdList2} OR G.CONF_YN = #{searchCdList2} ) 
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList3)" >	<!-- 결재상태 -->
			AND E.APRV_YN_TP = #{searchCdList3} 
		</if>
		ORDER BY E.SORT_ORDR DESC, A.CRTN_DT DESC
<!-- 		           A.CRTN_DT DESC, A.TERM_ST_YM ASC, TO_NUMBER(A.APRV_NO) ASC -->
	</select>
	<!-- 총건수 -->
	<select id="getAprvTotalCount" resultType="int" parameterType="map" >
		WITH VW_APRV_LINE AS (
			/* 진행 상태 정보 가져오기 */
		  SELECT
		    APRV_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '대기'
		        WHEN TOT_CNT = APRV_YN_1 THEN '완료'
		        WHEN APRV_YN_2 > 0 THEN '보류'
		        WHEN APRV_YN_3 > 0 THEN '반려'
		        ELSE '진행중'
		      END APRV_YN_NM
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '0'
		        WHEN TOT_CNT = APRV_YN_1 THEN '1'
		        WHEN APRV_YN_2 > 0 THEN '2'
		        WHEN APRV_YN_3 > 0 THEN '3'
		        ELSE '9'
		      END APRV_YN_TP
			, APRV_YN_1 AS APRV_YN_END_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '1'
		        WHEN TOT_CNT = APRV_YN_1 THEN '0'
		        WHEN APRV_YN_2 > 0 THEN '1'
		        WHEN APRV_YN_3 > 0 THEN '1'
		        ELSE '1'
		      END SORT_ORDR
		  FROM (
		    SELECT 
		      A.APRV_NO
		      , SUM(TOT_CNT) As TOT_CNT
		      , SUM(APRV_YN_0) AS APRV_YN_0		/* 대기 */
		      , SUM(APRV_YN_1) AS APRV_YN_1		/* 완료 */
		      , SUM(APRV_YN_2) AS APRV_YN_2		/* 보류 */
		      , SUM(APRV_YN_3) AS APRV_YN_3		/* 반려 */
		    FROM (
              SELECT 
                APRV_NO
                , COUNT(1) AS TOT_CNT
                , CASE
                    WHEN APRV_YN_CD = 0 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_0        /* 대기 */
                , CASE
                    WHEN APRV_YN_CD = 1 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_1        /* 완료 */
                , CASE
                    WHEN APRV_YN_CD = 2 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_2        /* 보류 */
                , CASE
                    WHEN APRV_YN_CD = 3 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_3        /* 반려 */
              FROM STD_APRV_LINE 
              WHERE NVL(REFE_YN, 'N') = 'N'
              GROUP BY APRV_NO, APRV_YN_CD ,NVL(REFE_YN, 'N')
		    ) A
		    GROUP BY A.APRV_NO
		  )
		)
		, VW_STD_LINE AS (
			/* 결재자관련 정보 */			
			SELECT
			  APRV_NO, APRV_YN_CD, APRV_ORDR, CONF_YN
			FROM STD_APRV_LINE
			WHERE APRV_EMP_NO = #{uss_id}
		)
	    , VW_STD_CONF AS (
	    	/* 확인 유무 정보 */
			SELECT C.APRV_NO, C.CONF_YN
	          FROM STD_APRV_LINE C
	         WHERE (C.APRV_NO || '_' || C.APRV_ORDR) IN (  SELECT    B.APRV_NO
	                                                              || '_'
	                                                              || MAX (B.APRV_ORDR)
	                                                         FROM STD_APRV_MNG A,
	                                                              STD_APRV_LINE B
	                                                        WHERE     A.REPT_APRV_NO =
	                                                                     #{uss_id}
	                                                              AND A.APRV_NO = B.APRV_NO
	                                                     GROUP BY B.APRV_NO)
	        UNION
			SELECT B.APRV_NO, B.CONF_YN
				FROM STD_APRV_LINE B
			WHERE B.APRV_EMP_NO = #{uss_id}
	    )
		SELECT COUNT(1) AS CNT
		 FROM STD_APRV_MNG A
		    LEFT OUTER JOIN VW_STD_LINE F ON F.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_STD_CONF G ON G.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_APRV_LINE E ON E.APRV_NO = A.APRV_NO
		WHERE 1=1
		<if test='uss_auth_cd != "ROLE_ADMIN"'>
			AND( A.REPT_APRV_NO = #{uss_id}
				OR A.APRV_NO IN (SELECT APRV_NO FROM STD_APRV_LINE WHERE APRV_EMP_NO = #{uss_id}) )		<!-- 만약 결재자 일경우에 결재가 완료된 정보를 안보여줄경우  -->
<!-- 					OR ( A.APRV_NO IN (SELECT APRV_NO FROM STD_APRV_LINE WHERE APRV_EMP_NO = #{uss_id}) AND E.APROV_YN != '완료' ) )	 --> <!-- 만약 결재자 일경우에 결재가 완료된 정보를 안보여줄경우  -->
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchField)" >
			<choose>
				<when test='searchGubun == "01"' >
			AND A.TITLE LIKE '%' || #{searchField} || '%'
				</when>
				<when test='searchGubun == "02"' >
			AND A.REPT_CONT LIKE '%' || #{searchField} || '%'	
				</when>
			</choose>
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList1)" >	<!-- 결재구분 -->
			AND A.APRV_TYPE_CD = UPPER(#{searchCdList1})
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList2)" >	<!-- 확인유무 -->
			AND (F.CONF_YN = #{searchCdList2} OR G.CONF_YN = #{searchCdList2} )
		</if>
		<if test="@kr.letech.cmm.util.DBSupport@isNotEmpty(searchCdList3)" >	<!-- 결재상태 -->
			AND E.APRV_YN_TP = #{searchCdList3} 
		</if>
	</select>
	
	<!-- 결재정보 상세조회 -->
	<select id="getAprvView" resultType="HashMap" parameterType="map" >
		WITH VW_LINE_CNT AS (
			
			/* 진행 상태 정보 가져오기 */
		  SELECT
		    APRV_NO
		    , CASE
		        WHEN TOT_CNT = APRV_YN_0 THEN '0'
		        WHEN TOT_CNT = APRV_YN_1 THEN '1'
		        WHEN APRV_YN_2 > 0 THEN '2'
		        WHEN APRV_YN_3 > 0 THEN '3'
		        ELSE '9'
		      END APRV_LINE_CD
		  FROM (
		    SELECT 
		      A.APRV_NO
		      , SUM(TOT_CNT) As TOT_CNT
		      , SUM(APRV_YN_0) AS APRV_YN_0		/* 대기 */
		      , SUM(APRV_YN_1) AS APRV_YN_1		/* 완료 */
		      , SUM(APRV_YN_2) AS APRV_YN_2		/* 보류 */
		      , SUM(APRV_YN_3) AS APRV_YN_3		/* 반려 */
		    FROM (
              SELECT 
                APRV_NO
                , COUNT(1) AS TOT_CNT
                , CASE
                    WHEN APRV_YN_CD = 0 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_0        /* 대기 */
                , CASE
                    WHEN APRV_YN_CD = 1 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_1        /* 완료 */
                , CASE
                    WHEN APRV_YN_CD = 2 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_2        /* 보류 */
                , CASE
                    WHEN APRV_YN_CD = 3 AND NVL(REFE_YN, 'N') = 'N' THEN COUNT(1)
                    ELSE 0
                 END APRV_YN_3        /* 반려 */
              FROM STD_APRV_LINE 
              WHERE NVL(REFE_YN, 'N') = 'N'
              GROUP BY APRV_NO, APRV_YN_CD ,NVL(REFE_YN, 'N')
		    ) A
		    GROUP BY A.APRV_NO
		  )
		)
		, VW_CONF_Y AS (
			SELECT
				APRV_NO
				, CASE
					WHEN CONF_TOT = CONF_N THEN 'N'
					ELSE 'Y'
				END CONF_TYPE
			FROM (
				SELECT
					APRV_NO
					, SUM(CONF_TOT) AS CONF_TOT
					, SUM(CONF_N) AS CONF_N
				FROM (
					SELECT
						APRV_NO
						, COUNT(1) AS CONF_TOT
						, CASE
							WHEN CONF_YN = 'N' THEN COUNT(1)
							ELSE 0
						END CONF_N
					FROM
						STD_APRV_LINE
					WHERE APRV_NO = #{aprv_no}
						AND NVL(REFE_YN, 'N') = 'N'
					GROUP BY APRV_NO, CONF_YN
				)
				GROUP BY APRV_NO
			)
		)
        , VW_ORGNZT AS (
            SELECT USS.USS_ID
                 , DP.DP_NM
              FROM STD_USS_MNG USS
                      LEFT OUTER JOIN (
                          SELECT 
                            CD AS DP_CD, LTRIM (SYS_CONNECT_BY_PATH (CD_NM, ' > '), ' > ') AS DP_NM
                        FROM STD_CD_MNG
                          START WITH UP_CD = 'CD0008'
                          CONNECT BY PRIOR CD = UP_CD
                        ORDER SIBLINGS BY CD_ORD ASC
                    ) DP ON DP.DP_CD = USS.DP_CD
        )
		SELECT A.APRV_NO					/* 결재번호 */
			, A.REPT_APRV_NO				/* 보고자사원번호 */
			, B.USS_NM AS REPT_APRV_NM
			, A.APRV_TYPE_CD				/* 결재구분코드(UP_CD=VarConsts.EAM_MASTER_CODE) */
			, A.APRV_TYPE_DTIL_CD				/* 결재구분상세코드 */
			, A.TITLE					/* 제목 */
			, A.PROJ_CD					/* 프로젝트코드 */
			, A.TERM_ST_YM					/* 기간시작일자 */
			, A.TERM_ED_YM					/* 기간종료일자 */
			, A.REPT_CONT					/* 보고내용 */
			, A.HALF_TYPE_CD				/* 반차구분코드 */
			, A.PLACE					/* 행선지 */
			, NVL(C.APRV_LINE_CD, '0') AS APRV_LINE_CD
			, D.CONF_TYPE					/* 확인 유무 */
			, E.DP_NM AS dpNm
			, A.CAL_NO		/* 캘린더 번호 */
		FROM STD_APRV_MNG A
			LEFT OUTER JOIN STD_USS_MNG B ON B.USS_ID = A.REPT_APRV_NO
			LEFT OUTER JOIN VW_LINE_CNT C ON C.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_CONF_Y D ON D.APRV_NO = A.APRV_NO
			LEFT OUTER JOIN VW_ORGNZT E ON E.USS_ID = A.REPT_APRV_NO
		WHERE A.APRV_NO = #{aprv_no}
	</select>
	
	<!-- 결재정보 등록 -->
	<insert id="aprvInsert" parameterType="map" >
		<selectKey keyProperty="aprv_no" resultType="String" order="BEFORE">
			SELECT NVL(MAX(TO_NUMBER(aprv_no)),0)+1
			 FROM STD_APRV_MNG
		</selectKey>
		INSERT INTO STD_APRV_MNG
			(
				APRV_NO
			  , REPT_APRV_NO
			  , APRV_TYPE_CD
			  , APRV_TYPE_DTIL_CD
			  , TITLE
			  , PROJ_CD
			  , TERM_ST_YM
			  , TERM_ED_YM
			  , REPT_CONT
			  , HALF_TYPE_CD
			  , PLACE
			  , CRTN_EMP_NO
			  , CRTN_DT
			  , MODI_EMP_NO
			  , MODI_DT
			) VALUES
			(
				#{aprv_no}
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , #{cdList1, jdbcType=VARCHAR}
			  , #{cdList2, jdbcType=VARCHAR}
			  , #{title, jdbcType=VARCHAR}
			  , #{proj_cd, jdbcType=VARCHAR}
			  , #{term_st_ym, jdbcType=VARCHAR}
			  , #{term_ed_ym, jdbcType=VARCHAR}
			  , #{rept_cont, jdbcType=VARCHAR}
			  , #{half_type_cd, jdbcType=VARCHAR}
			  , #{place, jdbcType=VARCHAR}
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			)
	</insert>
	
	<!-- 결재정보 수정 -->
	<update id="aprvUpdate" parameterType="map" >
		UPDATE STD_APRV_MNG
		      SET APRV_TYPE_CD = #{cdList1, jdbcType=VARCHAR}
		          , APRV_TYPE_DTIL_CD = #{cdList2, jdbcType=VARCHAR}
		          , TITLE = #{title, jdbcType=VARCHAR}
		          , PROJ_CD = #{proj_cd, jdbcType=VARCHAR}
		          , TERM_ST_YM = #{term_st_ym, jdbcType=VARCHAR}
		          , TERM_ED_YM = #{term_ed_ym, jdbcType=VARCHAR}
		          , REPT_CONT = #{rept_cont, jdbcType=VARCHAR}
		          , HALF_TYPE_CD = #{half_type_cd, jdbcType=VARCHAR}
		          , PLACE = #{place, jdbcType=VARCHAR}
		          , MODI_EMP_NO = #{rept_aprv_no, jdbcType=VARCHAR}
		          , MODI_DT = SYSDATE
		          , CAL_NO = #{cal_no, jdbcType=VARCHAR}
		 WHERE APRV_NO = #{aprv_no, jdbcType=VARCHAR}
	</update>
	
	<!-- 결재정보 삭제 -->
	<delete id="aprvDelete" parameterType="map" >
		DELETE FROM STD_APRV_MNG
		WHERE APRV_NO = #{aprv_no, jdbcType=VARCHAR}
	</delete>
	
	<!-- 결재라인 등록 -->
	<insert id="aprvLineInsert" parameterType="map" >
		INSERT INTO STD_APRV_LINE
			(
				APRV_NO
			  , APRV_EMP_NO
			  , APRV_ORDR
			  , APRV_YM
			  , APRV_YN_CD
			  , APRV_CONT
			  , CRTN_EMP_NO
			  , CRTN_DT
			  , MODI_EMP_NO
			  , MODI_DT
			  , CONF_YN
			  , REFE_YN
			) VALUES
			(
				#{aprv_no, jdbcType=VARCHAR}
			  , #{aprv_emp_no, jdbcType=VARCHAR}
			  , #{aprv_ordr, jdbcType=VARCHAR}
			  , #{aprv_ym, jdbcType=VARCHAR}
			  , #{aprv_yn_cd, jdbcType=VARCHAR}
			  , #{aprv_cont, jdbcType=VARCHAR}
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			  , #{rept_aprv_no, jdbcType=VARCHAR}
			  , SYSDATE
			  , 'N'
			  , #{refe_yn, jdbcType=VARCHAR}
			)
	</insert>
	
	<!-- 결재라인 삭제 -->
	<delete id="aprvLineDelete" parameterType="map" >
		DELETE FROM STD_APRV_LINE
		WHERE APRV_NO = #{aprv_no, jdbcType=VARCHAR}
	</delete>
	<!-- 결재라인 목록정보 -->
	<select id="aprvLineList" resultType="hashMap" parameterType="map" >
		SELECT
		  A.APRV_NO
		  , A.APRV_EMP_NO
		  , A.APRV_ORDR
		  , A.APRV_YN_CD
		  , A.APRV_CONT
		  , CASE
		  		WHEN A.REFE_YN = 'Y' THEN ''
		  		WHEN A.APRV_YN_CD = '1' THEN '승인'
		  		WHEN A.APRV_YN_CD = '2' THEN '보류'
		  		WHEN A.APRV_YN_CD = '3' THEN '반려'
		  		ELSE '대기'		/* '0' */
		  	END APRV_YN_NM
		  , NVL(A.CONF_YN, 'N') AS CONF_YN
		  , B.USS_NM
		  , NVL(A.REFE_YN, 'N') AS REFE_YN
		  , CRTN_EMP_NO
		  , (SELECT B.RECE_YN
	           FROM STD_MAIL_SEND B
	          WHERE 1=1
	            AND B.SEND_PK1 = A.APRV_NO
	            AND B.SEND_PK2 = A.APRV_EMP_NO
	            AND B.SEND_SEQ = (SELECT MAX(C.SEND_SEQ)
	                                FROM STD_MAIL_SEND C
	                               WHERE 1=1 
	                                 AND C.SEND_PK1 = B.SEND_PK1
	                                 AND C.SEND_PK2 = B.SEND_PK2)) AS RECE_YN	/* 수신확인 */
		FROM STD_APRV_LINE A
			LEFT OUTER JOIN STD_USS_MNG B ON B.USS_ID = A.APRV_EMP_NO
		WHERE A.APRV_NO = #{aprv_no}
		ORDER BY DECODE(A.APRV_ORDR, 0, 99, A.APRV_ORDR) ASC
	</select>
	<!-- 결재 승인(완료, 보류, 반려) -->
	<update id="aprvLineUpdate" parameterType="map">
		UPDATE STD_APRV_LINE SET
			APRV_YN_CD = #{aprv_yn_cd}
			, APRV_CONT = #{aprv_cont, jdbcType=VARCHAR}
			, MODI_EMP_NO = #{aprv_emp_no}
			, MODI_DT = SYSDATE
		WHERE APRV_NO = #{aprv_no} AND APRV_EMP_NO = #{aprv_emp_no}
	</update>
	<!-- 결재라인 대기로 변경(반려, 보류에 대한 정보) -->
	<update id="aprvLineUpdateYncd" parameterType="map" >
		UPDATE STD_APRV_LINE SET
			APRV_YN_CD = '0'
		WHERE APRV_NO = #{aprv_no}
			AND APRV_YN_CD = #{aprv_line_cd}
	</update>
	
	<!-- 결재 첨부파일 등록 -->
	<insert id="aprvFileInsert" parameterType="map">
		<selectKey keyProperty="file_no" resultType="String" order="BEFORE">
			SELECT NVL(MAX(TO_NUMBER(FILE_NO)),0)+1
			 FROM STD_APRV_FILE_MNG
		</selectKey>
		INSERT INTO STD_APRV_FILE_MNG ( APRV_NO, FILE_NO, FILE_NM, FILE_STRE_NM, FILE_EXT, FILE_SIZE, CRTN_EMP_NO, CRTN_DT, MODI_EMP_NO, MODI_DT, FILE_PATH)
			VALUES ( #{aprv_no}, #{file_no}, #{file_nm, jdbcType=VARCHAR}, #{file_stre_nm, jdbcType=VARCHAR}, #{file_ext, jdbcType=VARCHAR}
					, #{file_size, jdbcType=VARCHAR}, #{rept_aprv_no, jdbcType=VARCHAR}, SYSDATE, #{rept_aprv_no, jdbcType=VARCHAR}, SYSDATE, #{file_path, jdbcType=VARCHAR})
	</insert>
	<!-- 결재 삭제시 해당 파일정보 삭제 -->
	<delete id="aprvFileDelete" parameterType="map">
		DELETE FROM STD_APRV_FILE_MNG WHERE APRV_NO = #{aprv_no}
	</delete>
	<!-- 단일 파일 삭제 -->
	<delete id="aprvFileOneDelete" parameterType="map">
		DELETE FROM STD_APRV_FILE_MNG WHERE FILE_NO = #{file_no}
	</delete>
	<!-- 결재 첨부파일 정보 조회 -->
	<select id="aprvFileList" resultType="hashMap" parameterType="map">
		SELECT
			APRV_NO
			, FILE_NO
			, FILE_NM
			, FILE_STRE_NM
			, FILE_EXT
			, FILE_SIZE
			, FILE_PATH
		FROM
		  STD_APRV_FILE_MNG
		WHERE APRV_NO = #{aprv_no}
	</select>
	
	
	<!-- 결제중, 반려, 보류인 정보 조회(aprv_yn_cd = 0:결재중, 3:반려, 2:보류 ) -->
	<select id="layerAprvInfo" resultType="hashMap" parameterType="map">
		WITH TB_SKIN AS (
		  SELECT
		    CD, CD_NM
		  FROM STD_CD_MNG
		  WHERE UP_CD = #{aprv_up_cd}
		  ORDER BY CD_ORD ASC
		)
		, TB_DATA AS (
<!-- 
			SELECT
				APRV_TYPE_CD
				,SUM(TYPE_CNT) AS TYPE_CNT
			FROM(
			  SELECT
			    B.APRV_TYPE_CD
			    , 1 AS TYPE_CNT
			  FROM STD_APRV_LINE A
			    , STD_APRV_MNG B
			  WHERE (A.APRV_EMP_NO = #{uss_id} OR B.REPT_APRV_NO = #{uss_id})
			    AND A.APRV_YN_CD = #{aprv_yn_cd}
			    AND A.APRV_NO = B.APRV_NO
			)
			GROUP BY APRV_TYPE_CD
-->
            SELECT 
                APRV_TYPE_CD
                , COUNT(1) AS TYPE_CNT
            FROM (      
                SELECT
                    B.APRV_NO
                    , B.APRV_TYPE_CD
                FROM
                    STD_APRV_MNG B
                    , STD_APRV_LINE A
                WHERE
                    B.REPT_APRV_NO = #{uss_id}
                    AND A.APRV_NO = B.APRV_NO
                    AND A.APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(A.REFE_YN, 'N') = 'N'
                GROUP BY B.APRV_NO, B.APRV_TYPE_CD
                UNION
                SELECT
                    A.APRV_NO
                    , B.APRV_TYPE_CD
                FROM
                    STD_APRV_LINE A
                    , STD_APRV_MNG B
                WHERE
                    A.APRV_EMP_NO = #{uss_id}
                    AND A.APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(A.REFE_YN, 'N') = 'N'
                    AND B.APRV_NO = A.APRV_NO
                GROUP BY A.APRV_NO, B.APRV_TYPE_CD
            ) GROUP BY APRV_TYPE_CD
		)
		SELECT
		  TB_SKIN.CD_NM
		  , TB_SKIN.CD
		  , NVL(TB_DATA.TYPE_CNT, 0) AS TYPE_CNT
		FROM
		  TB_SKIN, TB_DATA
		WHERE TB_SKIN.CD = TB_DATA.APRV_TYPE_CD(+)
	</select>
	<select id="layerAprvInfoCount" resultType="int" parameterType="map">
<!-- 
		SELECT
			COUNT(1) AS TYPE_CNT
		FROM (
			SELECT
			  A.APRV_NO
			FROM STD_APRV_LINE A
			  , STD_APRV_MNG B
			WHERE (A.APRV_EMP_NO = #{uss_id} OR B.REPT_APRV_NO = #{uss_id})
			  AND A.APRV_YN_CD = #{aprv_yn_cd}
			  AND A.APRV_NO = B.APRV_NO
			GROUP BY A.APRV_NO
		)
 -->
        SELECT
            COUNT(1) AS TYPE_CNT
        FROM (
            SELECT
                APRV_NO
            FROM (
                SELECT
                    APRV_NO
                FROM STD_APRV_LINE
                WHERE
                    APRV_EMP_NO = #{uss_id}
                    AND APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(REFE_YN, 'N') != 'Y' 
                UNION
                SELECT
                    A.APRV_NO
                FROM
                    STD_APRV_LINE A
                    , STD_APRV_MNG B
                WHERE
                    B.REPT_APRV_NO = #{uss_id}
                    AND A.APRV_NO = B.APRV_NO
                    AND A.APRV_YN_CD = #{aprv_yn_cd}
                    AND NVL(A.REFE_YN, 'N') != 'Y'
                GROUP BY A.APRV_NO
            )
            GROUP BY APRV_NO
        )
	</select>
	
	<!-- 결재자가 결재할 정보를 확인한 경우 -->
	<update id="updateConfYn" parameterType="map">
		UPDATE STD_APRV_LINE SET CONF_YN = 'Y' WHERE APRV_NO = #{aprv_no} AND APRV_EMP_NO = #{aprv_emp_no}
	</update>
	
	<!-- 반려시 이전 결재자들의 데이터 반려로 변경 -->
	<update id="updateCompanion" parameterType="map">
		<![CDATA[
		UPDATE STD_APRV_LINE SET
		  APRV_YN_CD = '3'
		WHERE APRV_NO = #{aprv_no}
		    AND APRV_ORDR < (
		          SELECT 
		              MAX(APRV_ORDR) 
		          FROM STD_APRV_LINE 
		          WHERE APRV_NO = #{aprv_no} 
		              AND APRV_EMP_NO = #{aprv_emp_no}
		    )
		]]>
	</update>
</mapper>
